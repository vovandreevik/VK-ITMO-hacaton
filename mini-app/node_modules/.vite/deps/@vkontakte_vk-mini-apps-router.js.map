{
  "version": 3,
  "sources": ["../../@vkontakte/vk-mini-apps-router/src/components/RouterProvider.tsx", "../../@remix-run/router/history.ts", "../../@remix-run/router/utils.ts", "../../@remix-run/router/router.ts", "../../@vkontakte/vk-mini-apps-router/src/const.ts", "../../@vkontakte/vk-mini-apps-router/src/contexts.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/utils.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/buildPanelPathFromModalMatch.ts", "../../@vkontakte/vk-mini-apps-router/src/services/InitialLocation.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/createBrowserRouter.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/react-router-override/createLocation.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/react-router-override/getHistoryState.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/react-router-override/getUrlBasedHistory.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/react-router-override/HashParamHistory.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/createHashParamRouter.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/createHashRouter.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/createSearchParams.ts", "../../@vkontakte/vk-mini-apps-router/src/services/TransactionExecutor.ts", "../../@vkontakte/vk-mini-apps-router/src/entities/NavigationTransaction.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/fillHistory.ts", "../../@vkontakte/vk-mini-apps-router/src/utils/getHrefWithoutHash.ts", "../../@vkontakte/vk-mini-apps-router/src/services/BridgeService.ts", "../../@vkontakte/vk-mini-apps-router/src/services/EventBus.ts", "../../@vkontakte/vk-mini-apps-router/src/services/ContextThrottleService.ts", "../../@vkontakte/vk-mini-apps-router/src/services/DefaultRouteNavigator.ts", "../../@vkontakte/vk-mini-apps-router/src/services/ViewHistory.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useBlockForwardToModals.ts", "../../@vkontakte/vk-mini-apps-router/src/components/DefaultNotFound.tsx", "../../@vkontakte/vk-mini-apps-router/src/hooks/useHref.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useResolvedPath.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useThrottledContext.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/hooks.ts", "../../@vkontakte/vk-mini-apps-router/src/components/RouterLink.tsx", "../../@vkontakte/vk-mini-apps-router/src/hooks/useLinkClickHandler.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useGetPanelForView.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useSearchParams.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useMetaParams.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useFirstPageCheck.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useActiveVkuiLocation.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useEnableSwipeBack.ts", "../../@vkontakte/vk-mini-apps-router/src/hooks/useBlocker.ts", "../../@vkontakte/vk-mini-apps-router/src/hoc/withRouter.tsx", "../../@vkontakte/vk-mini-apps-router/src/page-types/common.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/ViewConfig.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/RootConfig.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/PanelPage.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/ModalPage.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/TabPage.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/RoutesConfig.ts", "../../@vkontakte/vk-mini-apps-router/src/page-types/index.ts"],
  "sourcesContent": ["import { ReactElement, ReactNode, useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { Action, Router } from '@remix-run/router';\nimport bridge from '@vkontakte/vk-bridge';\nimport { SEARCH_PARAM_INFLATE, STATE_KEY_SHOW_POPOUT, UNIVERSAL_URL } from '../const';\nimport { PopoutContext, RouteContext, RouterContext } from '../contexts';\nimport { getRouteContext, fillHistory, createSearchParams, getHrefWithoutHash } from '../utils';\nimport {\n  DefaultRouteNavigator,\n  ContextThrottleService,\n  TransactionExecutor,\n  RouteNavigator,\n  ViewHistory,\n} from '../services';\nimport { useBlockForwardToModals } from '../hooks/useBlockForwardToModals';\nimport { DefaultNotFound } from './DefaultNotFound';\nimport { RouteLeaf } from '../type';\n\nexport interface RouterProviderProps {\n  router: Router;\n  children: ReactNode;\n  interval?: number;\n  useBridge?: boolean;\n  throttled?: boolean;\n  hierarchy?: RouteLeaf[];\n  notFound?: ReactNode;\n  notFoundRedirectPath?: string;\n}\n\nexport function RouterProvider({\n  router,\n  children,\n  notFound,\n  hierarchy,\n  notFoundRedirectPath,\n  interval = 400,\n  useBridge = true,\n  throttled = true,\n}: RouterProviderProps): ReactElement {\n  const [popout, setPopout] = useState<JSX.Element | null>(null);\n  const [viewHistory] = useState<ViewHistory>(new ViewHistory());\n  const [panelsHistory, setPanelsHistory] = useState<string[]>([]);\n  const isPopoutShown = router.state.location.state?.[STATE_KEY_SHOW_POPOUT];\n\n  const dataRouterContext = useMemo(() => {\n    const routeNavigator: RouteNavigator = new DefaultRouteNavigator(\n      router,\n      viewHistory,\n      setPopout,\n    );\n    return { router, routeNavigator, viewHistory };\n  }, [router, viewHistory, setPopout]);\n\n  const routeContext = useMemo(\n    () => getRouteContext(router.state, panelsHistory),\n    [router.state, panelsHistory],\n  );\n\n  const dataPopoutContext = useMemo(() => {\n    return { popout: isPopoutShown ? popout : null };\n  }, [isPopoutShown, popout]);\n\n  useBlockForwardToModals(router, viewHistory, dataRouterContext.routeNavigator);\n  useEffect(() => {\n    // Отключаем браузерное восстановление скролла, используем решения от VKUI\n    history.scrollRestoration = 'manual';\n\n    TransactionExecutor.resetTransactions();\n    viewHistory.resetHistory();\n    viewHistory.updateNavigation({ ...router.state, historyAction: Action.Push });\n    setPanelsHistory(viewHistory.panelsHistory);\n\n    router.subscribe((state) => {\n      viewHistory.updateNavigation(state);\n      setPanelsHistory(viewHistory.panelsHistory);\n      TransactionExecutor.doNext();\n    });\n\n    if (useBridge) {\n      bridge.subscribe((event) => {\n        if (event.detail.type === 'VKWebAppChangeFragment') {\n          router.navigate(event.detail.data.location, { replace: true });\n        }\n      });\n\n      router.subscribe((state) => {\n        const href = router.createHref(state.location);\n        const hrefWithoutHash = getHrefWithoutHash();\n        const location = href.replace(hrefWithoutHash, '').replace(/^#/, '');\n        bridge.send('VKWebAppSetLocation', { location, replace_state: true });\n      });\n    }\n\n    const searchParams = createSearchParams(router.state.location.search);\n    const enableFilling = Boolean(searchParams.get(SEARCH_PARAM_INFLATE));\n    if (hierarchy && enableFilling) {\n      fillHistory(hierarchy, dataRouterContext.routeNavigator, routeContext);\n    }\n  }, [router]);\n\n  useLayoutEffect(() => {\n    ContextThrottleService.updateThrottledServiceSettings({\n      interval,\n      throttled,\n    });\n  }, [interval, throttled]);\n\n  const routeNotFound = Boolean(\n    !routeContext.match ||\n      (routeContext.state.errors &&\n        routeContext.state.errors[routeContext.match.route.id] &&\n        routeContext.state.errors[routeContext.match.route.id].status === 404),\n  );\n\n  if (notFoundRedirectPath && (routeNotFound || routeContext.match?.route.path === UNIVERSAL_URL)) {\n    if (router.state.location.pathname === notFoundRedirectPath) {\n      console.warn('Incorrect notFoundRedirectPath');\n    } else dataRouterContext.routeNavigator.replace(notFoundRedirectPath);\n  }\n\n  return (\n    <RouterContext.Provider value={dataRouterContext}>\n      <PopoutContext.Provider value={dataPopoutContext}>\n        {routeNotFound &&\n          (notFound || <DefaultNotFound routeNavigator={dataRouterContext.routeNavigator} />)}\n        {!routeNotFound && <RouteContext.Provider value={routeContext} children={children} />}\n      </PopoutContext.Provider>\n    </RouterContext.Provider>\n  );\n}\n", "////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n", "import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n", "import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n", "export const STATE_KEY_SHOW_MODAL = 'showModal';\nexport const STATE_KEY_SHOW_POPOUT = 'showPopout';\nexport const STATE_KEY_BLOCK_FORWARD_NAVIGATION = 'blockForward';\nexport const NAVIGATION_BLOCKER_KEY = 'vk-mini-app-navigation-block';\n\nexport const SEARCH_PARAM_INFLATE = 'inflate';\n\nexport const UNIVERSAL_URL = '*';\n", "import { AgnosticRouteMatch, Router, RouterState } from '@remix-run/router';\nimport { createContext } from 'react';\nimport { RouteNavigator } from './services/RouteNavigator.type';\nimport { PageInternal } from './type';\nimport { ViewHistory } from './services/ViewHistory';\n\nexport interface RouterContextObject {\n  router: Router;\n  routeNavigator: RouteNavigator;\n  viewHistory: ViewHistory;\n}\n\nexport const RouterContext = createContext<RouterContextObject>(null!);\n\nexport interface RouteContextObject {\n  state: RouterState;\n  match?: AgnosticRouteMatch<string, PageInternal> | undefined;\n  panelsHistory: string[];\n}\n\nexport const RouteContext = createContext<RouteContextObject>(null!);\n\nexport interface PopoutContextObject {\n  popout: JSX.Element | null;\n}\n\nexport const PopoutContext = createContext<PopoutContextObject>({ popout: null });\n\nPopoutContext.displayName = 'PopoutContext';\nRouterContext.displayName = 'RouterContext';\nRouteContext.displayName = 'RouteContext';\n", "import {\n  AgnosticRouteMatch,\n  createPath,\n  Location,\n  Params,\n  Path,\n  RouterState,\n} from '@remix-run/router';\nimport { RouteContextObject } from '../contexts';\nimport { PageInternal } from '../type';\nimport { STATE_KEY_SHOW_MODAL, STATE_KEY_SHOW_POPOUT } from '../const';\nimport { ExtendedPath, ExtendedPathWithParams, NavigationTarget } from '../services';\nimport { Page, PageWithParams } from '../page-types/common';\n\nexport const isString = (tmp: unknown): tmp is string => typeof tmp === 'string';\n\nexport const isPageObject = (path: NavigationTarget): path is Page | PageWithParams<string> => {\n  return typeof path === 'object' && 'path' in path;\n};\n\nexport const isPageWithOptionsPath = (\n  path: NavigationTarget,\n): path is Partial<Path> | ExtendedPathWithParams<string> | ExtendedPath => {\n  return typeof path === 'object' && !isPageObject(path);\n};\n\nexport function getParamKeys(path: string | undefined): string[] {\n  return path?.match(/\\/:[^\\/]+/g)?.map((param) => param.replace('/', '')) ?? [];\n}\n\nexport function fillParamsIntoPath(path: string, params?: Params): string {\n  const parameters = getParamKeys(path);\n  const paramInjector = (acc: string, param: string): string => {\n    const paramName = param.replace(':', '');\n    invariant(params?.[paramName], `Missing parameter ${paramName} while building route ${path}`);\n    return acc.replace(param, params[paramName] as string);\n  };\n  return parameters.reduce(paramInjector, path);\n}\n\nexport function getRouteContext(\n  state: RouterState,\n  panelsHistory: string[] = [],\n): RouteContextObject {\n  return {\n    state,\n    match: state.matches.length\n      ? (state.matches[state.matches.length - 1] as AgnosticRouteMatch<string, PageInternal>)\n      : undefined,\n    panelsHistory: panelsHistory,\n  };\n}\n\nexport function isModalShown(location: Location): boolean {\n  return location.state && STATE_KEY_SHOW_MODAL in location.state;\n}\n\nexport function isPopoutShown(location: Location): boolean {\n  return location.state && STATE_KEY_SHOW_POPOUT in location.state;\n}\n\nexport function createKey() {\n  const allNumbersAndLetters = 36;\n  const positionAfterZeroAnDot = 2;\n  const keyLength = 7;\n  return Math.random()\n    .toString(allNumbersAndLetters)\n    .substring(positionAfterZeroAnDot, positionAfterZeroAnDot + keyLength);\n}\n\nexport function getDisplayName(WrappedComponent: { displayName?: string; name?: string }) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    if (typeof console !== 'undefined') console.warn(message);\n\n    try {\n      throw new Error(message);\n    } catch (e) {}\n  }\n}\n\nexport function invariant(value: boolean, message?: string): asserts value;\n\nexport function invariant<T>(value: T | null | undefined, message?: string): asserts value is T;\n\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === 'undefined') {\n    throw new Error(message);\n  }\n}\n\nexport function extractPathFromNavigationTarget(to: NavigationTarget, defaultPathname = '') {\n  if (isString(to)) {\n    return to;\n  }\n\n  const path = isPageObject(to) ? to.path : to.pathname || defaultPathname;\n\n  if (isString(path)) {\n    return path;\n  }\n\n  return path.path;\n}\n\nexport function transformSearchParams(\n  searchParams: URLSearchParams | Record<string, string> | string = '',\n) {\n  if (!isString(searchParams) && !(searchParams instanceof URLSearchParams)) {\n    return `${new URLSearchParams(searchParams)}`;\n  }\n\n  return searchParams.toString();\n}\n\nexport function getPathFromTo({\n  to,\n  params,\n  defaultPathname = '',\n}: {\n  to: NavigationTarget;\n  params?: Params;\n  defaultPathname?: string;\n}) {\n  const path = extractPathFromNavigationTarget(to, defaultPathname);\n  const search = isPageWithOptionsPath(to) ? transformSearchParams(to.search) : '';\n  const hasParams = getParamKeys(path).length > 0;\n\n  if (hasParams) {\n    const filledPath = fillParamsIntoPath(path, params);\n\n    return isPageWithOptionsPath(to)\n      ? createPath({ ...to, pathname: filledPath, search })\n      : filledPath;\n  }\n\n  return isPageWithOptionsPath(to) ? createPath({ ...to, pathname: path, search }) : path;\n}\n", "import { AgnosticDataRouteMatch, Router } from '@remix-run/router';\nimport { InternalRouteConfig, ModalWithRoot } from '../type';\nimport { fillParamsIntoPath, getParamKeys } from './utils';\n\nexport function buildPanelPathFromModalMatch(\n  match: AgnosticDataRouteMatch,\n  router: Router,\n): string | undefined {\n  const route = match.route as ModalWithRoot & InternalRouteConfig;\n  function rateByParams(route: { path?: string }): number {\n    return Object.keys(match.params)\n      .map((key) => Number(Boolean(route.path?.includes(`:${key}`))))\n      .reduce((acc, item) => acc + item, 0);\n  }\n  const panelRoute = router.routes\n    .filter((item) => {\n      const itemTyped = item as ModalWithRoot & InternalRouteConfig;\n      const parameters = getParamKeys(itemTyped.path).map((param) => param.replace(':', ''));\n      return (\n        !itemTyped.modal &&\n        itemTyped.tab === route.tab &&\n        itemTyped.panel === route.panel &&\n        itemTyped.view === route.view &&\n        itemTyped.root === route.root &&\n        parameters.every((param) => Object.keys(match.params).includes(param))\n      );\n    })\n    .sort((a, b) => rateByParams(a) - rateByParams(b))\n    .pop();\n  return panelRoute && fillParamsIntoPath(panelRoute.path!, match.params);\n}\n", "import { Location } from '@remix-run/router';\n\nexport class InitialLocation {\n  private static _instance: InitialLocation | undefined;\n  private _value: Location;\n\n  private constructor(value: Location) {\n    this._value = value;\n  }\n\n  static init(value: Location): void {\n    if (!InitialLocation._instance) {\n      InitialLocation._instance = new InitialLocation(value);\n    }\n  }\n\n  static get value(): Location | undefined {\n    return InitialLocation._instance?._value;\n  }\n}\n\nexport function getInitialLocation(): Location | undefined {\n  return InitialLocation.value;\n}\n", "import { Router as RemixRouter } from '@remix-run/router/dist/router';\nimport { createKey } from './utils';\nimport { createBrowserHistory, createRouter } from '@remix-run/router';\nimport { RouteWithoutRoot, RouteWithRoot } from '../type';\nimport { InitialLocation } from '../services/InitialLocation';\n\nexport function createBrowserRouter(routes: RouteWithRoot[] | RouteWithoutRoot[]): RemixRouter {\n  // Задать новый key для новой локации в случае, если приложение уже запущено,\n  // а пользователь делает переход изменив hash в адресной строке браузера.\n  window.addEventListener('popstate', (event: PopStateEvent) => {\n    if (!event.state) {\n      window.history.replaceState({ key: createKey() }, '');\n    }\n  });\n  const history = createBrowserHistory();\n  InitialLocation.init(history.location);\n  return createRouter({\n    history,\n    routes: routes.map((item) => ({ ...item, index: true })),\n  }).initialize();\n}\n", "import { Location, parsePath, To } from '@remix-run/router';\nimport { createKey } from '../utils';\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string,\n): Readonly<Location> {\n  return {\n    pathname: typeof current === 'string' ? current : current.pathname,\n    search: '',\n    hash: '',\n    ...(typeof to === 'string' ? parsePath(to) : to),\n    state,\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n}\n", "import { Location } from '@remix-run/router';\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nexport function getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n", "import { Action, createPath, History, Location, To } from '@remix-run/router';\nimport { UrlHistoryOptions } from './UrlHistoryOptions.type';\nimport { Listener } from '@remix-run/router/dist/history';\nimport { createLocation } from './createLocation';\nimport { getHistoryState } from './getHistoryState';\nimport { invariant } from '../utils';\n\nconst PopStateEventType = 'popstate';\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\nexport function getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window['history']) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Readonly<Location>, to: To) => void) | null,\n  options: UrlHistoryOptions = {},\n): History {\n  const { window = document.defaultView!, v5Compat = false } = options;\n  const globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, '');\n  }\n\n  function getIndex(): number {\n    const state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    const nextIndex = getIndex();\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    const delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    const location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    const historyState = getHistoryState(location, index);\n    const url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, '', url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, const that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === 'DataCloneError') {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    const location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    const historyState = getHistoryState(location, index);\n    const url = history.createHref(location);\n    globalHistory.replaceState(historyState, '', url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    const base = window.location.origin !== 'null' ? window.location.origin : window.location.href;\n\n    const href = typeof to === 'string' ? to : createPath(to);\n    invariant(base, `No window.location.(origin|href) available to create URL for href: ${href}`);\n    return new URL(href, base);\n  }\n\n  const history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error('A history only accepts one active listener');\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      const url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n", "import { createPath, History, Location, parsePath, To } from '@remix-run/router';\nimport { createLocation } from './createLocation';\nimport { UrlHistoryOptions } from './UrlHistoryOptions.type';\nimport { getUrlBasedHistory } from './getUrlBasedHistory';\nimport { warning } from '../utils';\n\nexport type HashParamHistoryOptions = UrlHistoryOptions & {\n  paramName?: string;\n};\n\nconst DEFAULT_PATH_PARAM_NAME = 'path';\n\n/**\n * Специальная история для интеграции с платформой Mini Apps ВКонтакте.\n * Позволяет передавать в хэше путь вместе с параметрами запуска.\n */\nexport function createHashParamHistory(options: HashParamHistoryOptions = {}): History {\n  const paramName = options.paramName || DEFAULT_PATH_PARAM_NAME;\n\n  function createHashParamLocation(window: Window, globalHistory: Window['history']) {\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\n    const pathFromHash = hashParams.get(paramName) || '';\n    const { pathname = '/', search = '', hash = '' } = parsePath(pathFromHash);\n    return createLocation(\n      '',\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || 'default',\n    );\n  }\n\n  function createHashParamHref(window: Window, to: To) {\n    const currentHashParams = new URLSearchParams(window.location.hash.substring(1));\n    const base = window.document.querySelector('base');\n    let href = '';\n\n    if (base && base.getAttribute('href')) {\n      const url = window.location.href;\n      const hashIndex = url.indexOf('#');\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    currentHashParams.set(paramName, typeof to === 'string' ? to : createPath(to));\n    return href + '#' + currentHashParams.toString();\n  }\n\n  function validateHashParamLocation(location: Readonly<Location>, to: To) {\n    warning(\n      location.pathname.startsWith('/'),\n      `relative pathnames are not supported in hash param history.push(${JSON.stringify(to)})`,\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashParamLocation,\n    createHashParamHref,\n    validateHashParamLocation,\n    options,\n  );\n}\n", "import { Router as RemixRouter } from '@remix-run/router/dist/router';\nimport { createKey } from './utils';\nimport { createRouter } from '@remix-run/router';\nimport { RouteWithoutRoot, RouteWithRoot } from '../type';\nimport { InitialLocation } from '../services/InitialLocation';\nimport { createHashParamHistory } from './react-router-override/HashParamHistory';\n\nexport function createHashParamRouter(routes: RouteWithRoot[] | RouteWithoutRoot[]): RemixRouter {\n  // Задать новый key для новой локации в случае, если приложение уже запущено,\n  // а пользователь делает переход изменив hash в адресной строке браузера.\n  window.addEventListener('popstate', (event: PopStateEvent) => {\n    if (!event.state) {\n      window.history.replaceState({ key: createKey() }, '');\n    }\n  });\n  const history = createHashParamHistory();\n  InitialLocation.init(history.location);\n  return createRouter({\n    history,\n    routes: routes.map((item) => ({ ...item, index: true })),\n  }).initialize();\n}\n", "import { Router as RemixRouter } from '@remix-run/router/dist/router';\nimport { createKey } from './utils';\nimport { createHashHistory, createRouter } from '@remix-run/router';\nimport { RouteWithoutRoot, RouteWithRoot } from '../type';\nimport { InitialLocation } from '../services/InitialLocation';\n\nexport function createHashRouter(routes: RouteWithRoot[] | RouteWithoutRoot[]): RemixRouter {\n  // Задать новый key для новой локации в случае, если приложение уже запущено,\n  // а пользователь делает переход изменив hash в адресной строке браузера.\n  window.addEventListener('popstate', (event: PopStateEvent) => {\n    if (!event.state) {\n      window.history.replaceState({ key: createKey() }, '');\n    }\n  });\n  const history = createHashHistory();\n  InitialLocation.init(history.location);\n  return createRouter({\n    history,\n    routes: routes.map((item) => ({ ...item, index: true })),\n  }).initialize();\n}\n", "export type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\nfunction convertObjectToURLInit(init: Record<string, string | string[]>) {\n  return Object.keys(init).reduce<ParamKeyValuePair[]>((memo, key) => {\n    const value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);\n  }, []);\n}\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(init: URLSearchParamsInit = ''): URLSearchParams {\n  const inputIsReadyForInstantiation =\n    typeof init === 'string' || Array.isArray(init) || init instanceof URLSearchParams;\n  return new URLSearchParams(inputIsReadyForInstantiation ? init : convertObjectToURLInit(init));\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null,\n) {\n  const searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n", "import { NavigationTransaction } from '../entities/NavigationTransaction';\n\nexport class TransactionExecutor {\n  private static instance?: TransactionExecutor;\n  private transactions: NavigationTransaction[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public static getInstance() {\n    if (!TransactionExecutor.instance) {\n      TransactionExecutor.instance = new TransactionExecutor();\n    }\n\n    return TransactionExecutor.instance;\n  }\n\n  public static get isRunSyncActive() {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    const hasMultipleTransactions = transactionExecutor.transactions.length > 1;\n    const hasSingleMultiActionTransaction =\n      transactionExecutor.transactions.length === 1 &&\n      transactionExecutor.transactions[0].isMultiAction;\n\n    return hasMultipleTransactions || hasSingleMultiActionTransaction;\n  }\n\n  public static add(transaction: NavigationTransaction) {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    transactionExecutor.transactions.push(transaction);\n  }\n\n  public static resetTransactions() {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    transactionExecutor.transactions = [];\n  }\n\n  public static async doNext(): Promise<void> {\n    const transactionExecutor = TransactionExecutor.getInstance();\n    const transactions = transactionExecutor.transactions;\n    // Нужно делать асинхронно, иначе будет бесконечный цикл навигация-изменение стейта-навигация...\n    setTimeout(() => {\n      if (transactions.length) {\n        transactions[0].doNext();\n        if (transactions[0].finished) {\n          transactions.shift();\n        }\n      }\n    });\n  }\n}\n", "export class NavigationTransaction {\n  private pointer = 0;\n  private resolve: VoidFunction = () => {\n    /* Empty */\n  };\n  private reject: VoidFunction = () => {\n    /* Empty */\n  };\n  private promise: Promise<void> = new Promise((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n\n  constructor(private actions: VoidFunction[]) {}\n\n  get isMultiAction(): boolean {\n    return this.actions.length > 1;\n  }\n\n  get donePromise(): Promise<void> {\n    return this.promise;\n  }\n\n  get finished(): boolean {\n    return this.pointer >= this.actions.length;\n  }\n\n  doNext(): void {\n    if (!this.finished) {\n      this.actions[this.pointer]();\n      this.pointer += 1;\n    }\n    // this.finished изменился при выполнении предыдущего условия - нельзя объединить в if-else.\n    if (this.finished) {\n      this.resolve();\n    }\n  }\n}\n", "import { RouteNavigator } from '../services/RouteNavigator.type';\nimport { RouteContextObject } from '../contexts';\nimport { RouteLeaf, RouteLeafWithParents } from '../type';\nimport { TransactionExecutor } from '../services/TransactionExecutor';\nimport { NavigationTransaction } from '../entities/NavigationTransaction';\nimport { fillParamsIntoPath } from './utils';\nimport { createSearchParams } from './createSearchParams';\nimport { SEARCH_PARAM_INFLATE } from '../const';\n\nfunction flattenBranch(\n  leafs: RouteLeaf[],\n  parents: RouteLeafWithParents[],\n): RouteLeafWithParents[] {\n  return leafs\n    .map((leaf) => {\n      const leafWithParents = { ...leaf, parents };\n      return leaf.children\n        ? flattenBranch(leaf.children, [...parents, leafWithParents])\n        : leafWithParents;\n    })\n    .flat();\n}\n\nexport function fillHistory(\n  config: RouteLeaf[],\n  routeNavigator: RouteNavigator,\n  context: RouteContextObject,\n) {\n  const leafs = flattenBranch(config, []);\n  const currentLocation = context.state.location;\n  const params = context.match?.params ?? {};\n  const targetPath = context.match?.route.path;\n  const targetLeaf = leafs.find((leaf) => leaf.path === targetPath);\n  if (!targetLeaf) {\n    return;\n  }\n  const records = targetLeaf.parents.map(({ path }) => fillParamsIntoPath(path, params));\n  setTimeout(() => {\n    if (records.length) {\n      const searchParams = createSearchParams(currentLocation.search);\n      searchParams.delete(SEARCH_PARAM_INFLATE);\n      const search = searchParams.toString().length > 0 ? `?${searchParams.toString()}` : '';\n      const to = `${currentLocation.pathname}${search}${currentLocation.hash}`;\n      const firstParent = records.shift() as string;\n      const actions = [\n        () => routeNavigator.replace(firstParent),\n        ...records.map((record) => () => routeNavigator.push(record)),\n        () => routeNavigator.push(to),\n      ];\n      const transaction = new NavigationTransaction(actions);\n      TransactionExecutor.add(transaction);\n      TransactionExecutor.doNext();\n    }\n  });\n}\n", "export const getHrefWithoutHash = () => {\n  let url = window.location.href;\n  let hashIndex = url.indexOf('#');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n};\n", "import bridge, { ErrorData } from '@vkontakte/vk-bridge';\nimport { createKey } from '../utils/utils';\n\nexport class BridgeService {\n  private swipeBackConsumers: string[] = [];\n\n  private static UNSUPPORTED_PLATFORM_ERROR_CODE = 6;\n\n  private static _instance: BridgeService | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private static handlePlatformError: (error: ErrorData) => void = (error) => {\n    if (error.error_data.error_code !== BridgeService.UNSUPPORTED_PLATFORM_ERROR_CODE) {\n      console.log(error);\n    }\n  };\n\n  static enableNativeSwipeBack(): string {\n    Promise.all([\n      bridge.send('VKWebAppSetSwipeSettings', { history: true }),\n      bridge.send('VKWebAppEnableSwipeBack'),\n    ]).catch(BridgeService.handlePlatformError);\n\n    const instance = BridgeService.instance;\n    const consumerId = createKey();\n    instance.swipeBackConsumers = [...instance.swipeBackConsumers, consumerId];\n\n    return consumerId;\n  }\n\n  static disableNativeSwipeBack(consumerId: string) {\n    const instance = BridgeService.instance;\n    /**\n     * Тот, кто попросил отключить нативный свайпбек, выходит из списка.\n     */\n    instance.swipeBackConsumers = instance.swipeBackConsumers.filter((id) => id !== consumerId);\n\n    /**\n     * Нативный свайпбек будет отключен только если больше не осталось тех, кому он нужен.\n     */\n    if (instance.swipeBackConsumers.length === 0) {\n      Promise.all([\n        bridge.send('VKWebAppSetSwipeSettings', { history: false }),\n        bridge.send('VKWebAppDisableSwipeBack'),\n      ]).catch(BridgeService.handlePlatformError);\n    }\n  }\n\n  private static get instance(): BridgeService {\n    if (!BridgeService._instance) {\n      BridgeService._instance = new BridgeService();\n    }\n    return BridgeService._instance;\n  }\n}\n", "export class EventBus {\n  private static instance?: EventBus;\n  private subscriptions: Record<string, Set<Function>> = {};\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public static getInstance() {\n    if (!EventBus.instance) {\n      EventBus.instance = new EventBus();\n    }\n\n    return EventBus.instance;\n  }\n\n  private isEventExist(contextName: string) {\n    return contextName in this.subscriptions;\n  }\n\n  public static broadcast(contextName: string, args: unknown[]) {\n    const eventBus = EventBus.getInstance();\n    if (!eventBus.isEventExist(contextName)) {\n      return;\n    }\n\n    eventBus.subscriptions[contextName].forEach((callback) => callback(...args));\n  }\n\n  public static subscribe<T extends Function>(contextName: string, callback: T) {\n    const eventBus = EventBus.getInstance();\n\n    if (!eventBus.isEventExist(contextName)) {\n      eventBus.subscriptions[contextName] = new Set();\n    }\n\n    const callbacks = eventBus.subscriptions[contextName];\n    callbacks.add(callback);\n\n    return () => {\n      callbacks.delete(callback);\n      if (callbacks.size === 0) {\n        delete eventBus.subscriptions[contextName];\n      }\n    };\n  }\n}\n", "import { EventBus } from './EventBus';\nimport { TransactionExecutor } from './TransactionExecutor';\n\ninterface ContextThrottleInfo {\n  prevValue: unknown;\n  updateTimerId: number;\n  throttledValue: unknown;\n  lastUpdateTimestamp: number;\n}\n\ninterface ContextThrottleServiceSettings {\n  interval: number;\n  throttled: boolean;\n}\n\nexport class ContextThrottleService {\n  private static instance?: ContextThrottleService;\n  private interval = 0;\n  private throttled = true;\n  private contextThrottleMap: Record<string, ContextThrottleInfo> = {};\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public static getInstance() {\n    if (!ContextThrottleService.instance) {\n      ContextThrottleService.instance = new ContextThrottleService();\n    }\n\n    return ContextThrottleService.instance;\n  }\n\n  private getContextThrottleInfoByName(contextName: string) {\n    if (!(contextName in this.contextThrottleMap)) {\n      this.contextThrottleMap[contextName] = {\n        prevValue: null,\n        throttledValue: null,\n        lastUpdateTimestamp: 0,\n        updateTimerId: 0,\n      };\n    }\n    return this.contextThrottleMap[contextName];\n  }\n\n  private isContextChange<T>(contextName: string, newValue: T) {\n    const contextData = this.getContextThrottleInfoByName(contextName);\n    return !(newValue === contextData.throttledValue);\n  }\n\n  private getTimeUntilNextUpdate(lastUpdateTimestamp: number) {\n    const timeSinceLastUpdate = Date.now() - lastUpdateTimestamp;\n    const delayUntilNextUpdate = this.interval - timeSinceLastUpdate;\n    return delayUntilNextUpdate;\n  }\n\n  private updateContextValue<T>(contextName: string, newValue: T) {\n    const contextData = this.getContextThrottleInfoByName(contextName);\n    contextData.prevValue = contextData.throttledValue;\n    contextData.lastUpdateTimestamp = Date.now();\n    contextData.throttledValue = newValue;\n    EventBus.broadcast(contextName, [contextData.throttledValue, contextData.prevValue]);\n  }\n\n  private throttleUpdateContextValue<T>(contextName: string, newValue: T) {\n    const contextData = this.getContextThrottleInfoByName(contextName);\n    clearTimeout(contextData.updateTimerId);\n    if (this.isRunSyncActive()) return;\n\n    const lastUpdateTimestamp = contextData.lastUpdateTimestamp;\n    const timeUntilNextUpdate = this.getTimeUntilNextUpdate(lastUpdateTimestamp);\n\n    if (timeUntilNextUpdate <= 0) {\n      this.updateContextValue(contextName, newValue);\n    } else {\n      contextData.updateTimerId = setTimeout(() => {\n        this.updateContextValue(contextName, newValue);\n      }, timeUntilNextUpdate);\n    }\n  }\n\n  private isRunSyncActive() {\n    return TransactionExecutor.isRunSyncActive;\n  }\n\n  public static triggerContextUpdate<T>(contextName: string, newValue: T) {\n    const throttledService = ContextThrottleService.getInstance();\n\n    if (!throttledService.isContextChange(contextName, newValue)) {\n      return;\n    }\n\n    if (!throttledService.throttled && !throttledService.isRunSyncActive()) {\n      throttledService.updateContextValue(contextName, newValue);\n    } else {\n      throttledService.throttleUpdateContextValue(contextName, newValue);\n    }\n  }\n\n  public static updateThrottledServiceSettings(settings: ContextThrottleServiceSettings) {\n    const throttledService = ContextThrottleService.getInstance();\n    throttledService.interval = settings.interval;\n    throttledService.throttled = settings.throttled;\n  }\n}\n", "import { BlockerFunction, Params, Router, RouterNavigateOptions } from '@remix-run/router';\nimport {\n  createKey,\n  getParamKeys,\n  extractPathFromNavigationTarget,\n  getPathFromTo,\n  isModalShown,\n  isPopoutShown,\n} from '../utils/utils';\nimport {\n  NAVIGATION_BLOCKER_KEY,\n  STATE_KEY_BLOCK_FORWARD_NAVIGATION,\n  STATE_KEY_SHOW_MODAL,\n  STATE_KEY_SHOW_POPOUT,\n} from '../const';\nimport { NavigationOptions, NavigationTarget, RouteNavigator } from './RouteNavigator.type';\nimport { buildPanelPathFromModalMatch } from '../utils/buildPanelPathFromModalMatch';\nimport { InternalRouteConfig, ModalWithRoot } from '../type';\nimport { ViewHistory } from './ViewHistory';\nimport { TransactionExecutor } from './TransactionExecutor';\nimport { NavigationTransaction } from '../entities/NavigationTransaction';\n\nexport class DefaultRouteNavigator implements RouteNavigator {\n  private readonly router: Router;\n  private readonly setPopout: (popout: JSX.Element | null) => void;\n  private blockers: Map<string, BlockerFunction> = new Map();\n  private blockerId = 0;\n\n  constructor(\n    router: Router,\n    private viewHistory: ViewHistory,\n    setPopout: (popout: JSX.Element | null) => void,\n  ) {\n    this.router = router;\n    this.setPopout = setPopout;\n  }\n\n  public async push(\n    to: NavigationTarget,\n    paramsOrOptions: Params | NavigationOptions = {},\n    options: NavigationOptions = {},\n  ): Promise<void> {\n    const { preparedOptions, preparedParams } = this.parseParams(to, paramsOrOptions, options);\n    const fullOptions = {\n      ...preparedOptions,\n      replace: Boolean(this.router.state.location.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION]),\n    };\n\n    await this.navigate(to, fullOptions, preparedParams);\n  }\n\n  public async replace(\n    to: NavigationTarget,\n    paramsOrOptions: Params | NavigationOptions = {},\n    options: NavigationOptions = {},\n  ): Promise<void> {\n    const { preparedOptions, preparedParams } = this.parseParams(to, paramsOrOptions, options);\n\n    await this.navigate(to, { ...preparedOptions, replace: true }, preparedParams);\n  }\n\n  public async back(to = 1): Promise<void> {\n    if (to === 0) {\n      return;\n    }\n    await this.go(-Math.abs(to));\n  }\n\n  public async backToFirst(): Promise<void> {\n    if (this.viewHistory.position > 0) {\n      await this.go(-this.viewHistory.position);\n    } else {\n      await TransactionExecutor.doNext();\n    }\n  }\n\n  public async go(to: number): Promise<void> {\n    if (to === 0) {\n      await TransactionExecutor.doNext();\n    } else {\n      await this.router.navigate(to);\n    }\n  }\n\n  public runSync(actions: VoidFunction[]): Promise<void> {\n    const transaction = new NavigationTransaction(actions);\n    TransactionExecutor.add(transaction);\n    TransactionExecutor.doNext();\n    return transaction.donePromise;\n  }\n\n  public async showModal(id: string): Promise<void> {\n    await this.router.navigate(this.router.state.location, {\n      state: { [STATE_KEY_SHOW_MODAL]: id, [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true },\n      replace: isModalShown(this.router.state.location),\n    });\n  }\n\n  public async hideModal(pushPanel = false): Promise<void> {\n    if ((!pushPanel && !this.viewHistory.isFirstPage) || isModalShown(this.router.state.location)) {\n      await this.router.navigate(-1);\n    } else {\n      const modalMatch = this.router.state.matches.find((match) => 'modal' in match.route);\n      if (modalMatch) {\n        const route = modalMatch.route as ModalWithRoot & InternalRouteConfig;\n        const path = buildPanelPathFromModalMatch(modalMatch, this.router);\n        if (!path) {\n          const rootMessage = route.root ? `root: ${route.root} ` : '';\n          throw new Error(`There is no route registered for panel with ${rootMessage}, view: ${route.view}, panel: ${route.panel}.\nMake sure this route exists or use hideModal with pushPanel set to false.`);\n        }\n        await this.navigate(path, { keepSearchParams: true });\n      } else {\n        await TransactionExecutor.doNext();\n      }\n    }\n  }\n\n  public async showPopout(popout: JSX.Element): Promise<void> {\n    this.setPopout(popout);\n    const state: any = {\n      [STATE_KEY_SHOW_POPOUT]: createKey(),\n      [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true,\n    };\n    if (isModalShown(this.router.state.location)) {\n      state[STATE_KEY_SHOW_MODAL] = this.router.state.location.state[STATE_KEY_SHOW_MODAL];\n    }\n    const replace =\n      isModalShown(this.router.state.location) || isPopoutShown(this.router.state.location);\n    await this.router.navigate(this.router.state.location, { state, replace });\n  }\n\n  public async hidePopout(): Promise<void> {\n    if (isPopoutShown(this.router.state.location)) {\n      this.setPopout(null);\n      if (isModalShown(this.router.state.location)) {\n        await this.router.navigate(this.router.state.location, {\n          state: {\n            [STATE_KEY_BLOCK_FORWARD_NAVIGATION]: true,\n            [STATE_KEY_SHOW_MODAL]: this.router.state.location.state[STATE_KEY_SHOW_MODAL],\n          },\n          replace: true,\n        });\n      } else {\n        await this.router.navigate(-1);\n      }\n    } else {\n      await TransactionExecutor.doNext();\n    }\n  }\n\n  public block(blocker: BlockerFunction) {\n    const key = (++this.blockerId).toString();\n    this.blockers.set(key, blocker);\n    const onLeave: BlockerFunction = (data) => {\n      return Array.from(this.blockers.values()).some((fn) => fn(data));\n    };\n    this.router.getBlocker(NAVIGATION_BLOCKER_KEY, onLeave);\n\n    return () => {\n      this.blockers.delete(key);\n    };\n  }\n\n  private async navigate(\n    to: NavigationTarget,\n    opts?: RouterNavigateOptions & NavigationOptions,\n    params: Params = {},\n  ): Promise<void> {\n    let path = getPathFromTo({ to, params, defaultPathname: this.router.state.location.pathname });\n    const newUrl = new URL(path, window.location.origin);\n\n    if (opts?.keepSearchParams) {\n      const currentSearchParams = new URLSearchParams(this.router.state.location.search);\n      const newSearchParams = new URLSearchParams(newUrl.search);\n\n      currentSearchParams.forEach((value, key) => {\n        if (!newSearchParams.has(key)) {\n          newSearchParams.set(key, value);\n        }\n      });\n\n      newUrl.search = newSearchParams.toString();\n      path = newUrl.pathname + (newUrl.search ? `${newUrl.search}` : '');\n    }\n\n    await this.router.navigate(path, opts);\n  }\n\n  private validateOptions({ state, keepSearchParams }: NavigationOptions = {}) {\n    const invalidState = state && typeof state !== 'object';\n    const invalidKeepSearchParams = keepSearchParams && typeof keepSearchParams !== 'boolean';\n\n    if (invalidState || invalidKeepSearchParams) {\n      console.warn('Invalid navigate options type');\n      return {};\n    }\n    return { state, keepSearchParams };\n  }\n\n  private parseParams(\n    to: NavigationTarget,\n    paramsOrOptions: Params | NavigationOptions = {},\n    options: NavigationOptions = {},\n  ) {\n    const path = extractPathFromNavigationTarget(to);\n\n    if (getParamKeys(path).length) {\n      return {\n        preparedParams: paramsOrOptions as Params,\n        preparedOptions: this.validateOptions(options),\n      };\n    }\n\n    return { preparedParams: {}, preparedOptions: this.validateOptions(paramsOrOptions) };\n  }\n}\n", "import { Action, RouterState } from '@remix-run/router';\nimport { getRouteContext } from '../utils/utils';\nimport { STATE_KEY_SHOW_POPOUT } from '../const';\nimport { ViewNavigationRecord } from './ViewNavigationRecord.type';\n\nexport class ViewHistory {\n  private history: ViewNavigationRecord[] = [];\n  private positionInternal = -1;\n\n  updateNavigation(state: RouterState): void {\n    const record = this.getViewRecordFromState(state);\n    if (!record) {\n      return;\n    }\n    switch (state.historyAction) {\n      case Action.Push:\n        this.push(record);\n        break;\n      case Action.Pop:\n        if (this.hasKey(record.locationKey)) {\n          this.pop(record);\n        } else {\n          // В случае, если пользователь введет в адресную строку новый хэш, мы поймаем POP событие с новой локацией.\n          this.push(record);\n        }\n        break;\n      case Action.Replace:\n        this.replace(record);\n        break;\n    }\n  }\n\n  get isFirstPage(): boolean {\n    return this.positionInternal < 1;\n  }\n\n  get panelsHistory(): string[] {\n    if (this.positionInternal < 0) {\n      return [];\n    }\n    const currentView = this.history[this.positionInternal].view;\n    const reversedClone = this.history.slice(0, this.positionInternal + 1).reverse();\n    const rightLimit = reversedClone.findIndex((item) => item.view !== currentView);\n    const historyCopy = reversedClone\n      .slice(0, rightLimit > -1 ? rightLimit : reversedClone.length)\n      .filter((item) => !item.modal && !item.popout)\n      .reverse();\n    return historyCopy.map(({ panel }) => panel);\n  }\n\n  get position(): number {\n    return this.positionInternal;\n  }\n\n  isPopForward(historyAction: Action, key: string): boolean {\n    const newPosition = this.history.findIndex(({ locationKey }) => locationKey === key);\n    return historyAction === Action.Pop && newPosition > this.position;\n  }\n\n  isPopBackward(historyAction: Action, key: string): boolean {\n    const newPosition = this.history.findIndex(({ locationKey }) => locationKey === key);\n    return historyAction === Action.Pop && newPosition <= this.position;\n  }\n\n  resetHistory() {\n    this.positionInternal = -1;\n    this.history = [];\n  }\n\n  private push(record: ViewNavigationRecord): void {\n    this.history = this.history.slice(0, this.positionInternal + 1);\n    this.history.push(record);\n    this.positionInternal = this.history.length - 1;\n  }\n\n  private replace(record: ViewNavigationRecord): void {\n    this.history[this.positionInternal] = record;\n  }\n\n  private pop(record: ViewNavigationRecord): void {\n    this.positionInternal = this.history.findIndex(\n      ({ locationKey }) => locationKey === record.locationKey,\n    );\n  }\n\n  private hasKey(key: string): boolean {\n    return Boolean(this.history.find(({ locationKey }) => locationKey === key));\n  }\n\n  private getViewRecordFromState(state: RouterState): ViewNavigationRecord | undefined {\n    const context = getRouteContext(state);\n    if (!context.match) {\n      return undefined;\n    }\n    const { route } = context.match;\n    return {\n      view: route.view,\n      panel: route.panel,\n      modal: 'modal' in route ? route.modal : undefined,\n      popout: state.location.state?.[STATE_KEY_SHOW_POPOUT],\n      locationKey: state.location.key,\n    };\n  }\n}\n", "import { useEffect } from 'react';\nimport { BlockerFunction, Router } from '@remix-run/router';\nimport {\n  STATE_KEY_BLOCK_FORWARD_NAVIGATION,\n  STATE_KEY_SHOW_MODAL,\n  STATE_KEY_SHOW_POPOUT,\n} from '../const';\nimport { ViewHistory } from '../services/ViewHistory';\nimport { RouteNavigator } from '../services/RouteNavigator.type';\n\nconst processedKeys: string[] = [];\n\nexport function useBlockForwardToModals(\n  router: Router,\n  viewHistory: ViewHistory,\n  routeNavigator: RouteNavigator,\n) {\n  useEffect(() => {\n    const blockerFunction: BlockerFunction = ({ historyAction, nextLocation }) => {\n      const isPopForward = viewHistory.isPopForward(historyAction, nextLocation.key);\n      const blockEnabled = isPopForward && nextLocation.key !== 'default';\n      return Boolean(blockEnabled && nextLocation.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION]);\n    };\n    const unbblocker = routeNavigator.block(blockerFunction);\n\n    return () => unbblocker();\n  }, [routeNavigator, viewHistory]);\n\n  useEffect(() => {\n    router.subscribe((state) => {\n      const key = state.location.key;\n      const isPopBackward = viewHistory.isPopBackward(state.historyAction, key);\n      if (\n        isPopBackward &&\n        state.location.state?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION] &&\n        !processedKeys.includes(key)\n      ) {\n        processedKeys.push(key);\n        const replaceState = { ...window.history.state };\n        if (replaceState.usr?.[STATE_KEY_SHOW_MODAL]) {\n          replaceState.usr = { ...replaceState.usr };\n          delete replaceState.usr?.[STATE_KEY_SHOW_MODAL];\n          delete replaceState.usr?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION];\n        }\n        if (replaceState.usr?.[STATE_KEY_SHOW_POPOUT]) {\n          replaceState.usr = { ...replaceState.usr };\n          delete replaceState.usr?.[STATE_KEY_SHOW_POPOUT];\n          delete replaceState.usr?.[STATE_KEY_BLOCK_FORWARD_NAVIGATION];\n        }\n        window.history.replaceState(replaceState, '');\n        router.navigate(-1).then(() =>\n          processedKeys.splice(\n            processedKeys.findIndex((name) => name === key),\n            1,\n          ),\n        );\n      }\n    });\n  }, [router, viewHistory]);\n}\n", "import { ReactElement } from 'react';\nimport { RouteNavigator } from '../services/RouteNavigator.type';\n\nconst DivStyles = {\n  background: '#3f5d81 url(https://vk.com/images/error404.png) no-repeat 50% 50%',\n  width: '100%',\n  height: '100%',\n  overflow: 'hidden',\n  margin: '0',\n  cursor: 'pointer',\n  backgroundSize: 'contain',\n};\n\nexport type DefaultNotFoundProps = {\n  routeNavigator: RouteNavigator;\n};\n\nexport function DefaultNotFound({ routeNavigator }: DefaultNotFoundProps): ReactElement {\n  return (\n    <div\n      onClick={() => void routeNavigator.replace('/')}\n      className=\"default-not-found\"\n      style={DivStyles}\n    ></div>\n  );\n}\n", "import { Location, RelativeRoutingType } from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext } from 'react';\nimport { useResolvedPath } from './useResolvedPath';\nimport { getHrefWithoutHash } from '../utils/getHrefWithoutHash';\nimport { getPathFromTo, invariant } from '../utils/utils';\nimport { InjectParamsIfNeeded } from '../page-types/common';\nimport { NavigationTarget } from '../services';\n\nexport type UseHrefOptions<T extends NavigationTarget> = InjectParamsIfNeeded<\n  T,\n  { relative?: RelativeRoutingType }\n>;\n\nexport function useHref<T extends NavigationTarget>(\n  to: T,\n  { relative, params }: UseHrefOptions<T>,\n) {\n  const routeContext = useContext(RouterContext);\n\n  invariant(\n    routeContext,\n    'You can not use useHref hook outside of RouteContext. Make sure calling it inside RouterProvider.',\n  );\n\n  const path = getPathFromTo({\n    to,\n    params,\n    defaultPathname: routeContext.router.state.location.pathname,\n  });\n\n  const { hash, pathname, search } = useResolvedPath(path, { relative });\n\n  const hrefWithoutHash = getHrefWithoutHash();\n  const href = routeContext.router.createHref({ pathname, search, hash } as Location);\n  const location = href.replace(hrefWithoutHash, '');\n\n  return location.startsWith('/') ? location : '/' + location;\n}\n", "import { Path, RelativeRoutingType, resolveTo, To, AgnosticRouteMatch } from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext, useMemo } from 'react';\nimport { useLocation } from './hooks';\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches<T extends AgnosticRouteMatch = AgnosticRouteMatch>(\n  matches: T[],\n) {\n  return matches.filter(\n    (match, index) => index === 0 || (match.route.path && match.route.path.length > 0),\n  );\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {},\n): Path {\n  const {\n    router: {\n      state: { matches },\n    },\n  } = useContext(RouterContext);\n  const { pathname: locationPathname } = useLocation();\n\n  const routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase),\n  );\n\n  return useMemo(\n    () => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === 'path'),\n    [to, routePathnamesJson, locationPathname, relative],\n  );\n}\n", "import { Context, useContext, useEffect, useState } from 'react';\nimport { ContextThrottleService } from '../services/ContextThrottleService';\nimport { EventBus } from '../services/EventBus';\n\nexport function useThrottledContext<T>(context: Context<T>): [T, T | null] {\n  const contextValue = useContext(context);\n  const contextName = context.displayName;\n  const [prevValue, setPrevValue] = useState<T>(contextValue);\n  const [throttledValue, setThrottledValue] = useState<T>(contextValue);\n\n  if (!contextName) {\n    console.error('No context display name found');\n    return [contextValue, null];\n  }\n\n  useEffect(() => {\n    const unsubscribe = EventBus.subscribe<(throttleValue: T, prevValue: T) => void>(\n      contextName,\n      (throttleValue, prevValue) => {\n        setThrottledValue(throttleValue);\n        setPrevValue(prevValue);\n      },\n    );\n\n    return () => unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    ContextThrottleService.triggerContextUpdate(contextName, contextValue);\n  }, [contextValue, contextName]);\n\n  return [throttledValue, prevValue];\n}\n", "import { PopoutContext, RouteContext, RouterContext } from '../contexts';\nimport { Location, Params } from '@remix-run/router';\nimport { RouteNavigator } from '../services/RouteNavigator.type';\nimport { useThrottledContext } from './useThrottledContext';\nimport { ModalWithRoot } from '../type';\nimport { invariant } from '../utils/utils';\nimport { useContext } from 'react';\n\nexport function useRouteNavigator(): RouteNavigator {\n  const routerContext = useContext(RouterContext);\n  invariant(\n    routerContext,\n    'You can not use useNavigator hook outside of RouterContext. Make sure calling it inside RouterProvider.',\n  );\n  return routerContext.routeNavigator;\n}\n\ntype RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  { [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>> }[Keys];\n\ntype AnimatedParts = Pick<ModalWithRoot, 'tab' | 'panel' | 'modal'>;\ntype NavId = RequireOnlyOne<AnimatedParts>;\n\nexport function useParams<T extends string = string>(id?: NavId): Params<T> | undefined {\n  const [routeContext, prevRouteContext] = useThrottledContext(RouteContext);\n  invariant(\n    routeContext,\n    'You can not use useParams hook outside of RouteContext. Make sure calling it inside RouterProvider.',\n  );\n  const match =\n    id &&\n    prevRouteContext &&\n    (Object.keys(id) as unknown as (keyof NavId)[]).every(\n      (key) => (routeContext.match?.route as ModalWithRoot)[key] !== id[key],\n    ) &&\n    (Object.keys(id) as unknown as (keyof NavId)[]).every(\n      (key) => (prevRouteContext.match?.route as ModalWithRoot)[key] === id[key],\n    )\n      ? prevRouteContext.match\n      : routeContext.match;\n  return match?.params;\n}\n\nexport function useLocation(): Location {\n  const [routeContext] = useThrottledContext(RouteContext);\n  invariant(\n    routeContext,\n    'You can not use useLocation hook outside of RouteContext. Make sure calling it inside RouterProvider.',\n  );\n  return routeContext.state.location;\n}\n\nexport function usePopout(): JSX.Element | null {\n  const [popoutContext] = useThrottledContext(PopoutContext);\n  return popoutContext.popout;\n}\n", "import { Link } from '@vkontakte/vkui';\nimport { useHref } from '../hooks/useHref';\nimport { RelativeRoutingType } from '@remix-run/router';\nimport {\n  AnchorHTMLAttributes,\n  CSSProperties,\n  forwardRef,\n  ReactNode,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react';\nimport { useLinkClickHandler } from '../hooks/useLinkClickHandler';\nimport { InjectParamsIfNeeded } from '../page-types/common';\nimport { NavigationTarget } from '../services';\nimport { isString } from '../utils';\n\nexport interface LinkProps<T extends NavigationTarget>\n  extends Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> {\n  to: T;\n  reloadDocument?: boolean;\n  replace?: boolean;\n  relative?: RelativeRoutingType;\n}\n\nexport interface RouterLinkProps<T extends NavigationTarget>\n  extends Omit<LinkProps<T>, 'className' | 'style' | 'children'> {\n  children?: ReactNode;\n  caseSensitive?: boolean;\n  className?: string;\n  end?: boolean;\n  style?: CSSProperties;\n}\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined';\n\nconst RouterLinkInner = <T extends NavigationTarget>(\n  {\n    to,\n    relative,\n    replace,\n    target,\n    reloadDocument,\n    params,\n    onClick,\n    ...rest\n  }: InjectParamsIfNeeded<T, RouterLinkProps<T>>,\n  ref: Ref<HTMLAnchorElement>,\n) => {\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  let navigationTarget: NavigationTarget = to;\n\n  if (isString(to) && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n\n    // Only check for external origins client-side\n    if (isBrowser) {\n      const currentUrl = new URL(window.location.href);\n      const targetUrl = to.startsWith('//') ? new URL(currentUrl.protocol + to) : new URL(to);\n      const path = targetUrl.pathname;\n\n      if (targetUrl.origin === currentUrl.origin) {\n        // Strip the protocol/origin/basename for same-origin absolute URLs\n        navigationTarget = path + targetUrl.search + targetUrl.hash;\n      } else {\n        isExternal = true;\n      }\n    }\n  }\n\n  const href = useHref(navigationTarget, { relative, params: params });\n\n  const internalOnClick = useLinkClickHandler(navigationTarget, {\n    replace,\n    target,\n    relative,\n    params,\n  });\n\n  function handleClick(event: ReactMouseEvent<HTMLAnchorElement>) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n\n  return (\n    <Link\n      {...rest}\n      href={absoluteHref || href}\n      onClick={isExternal || reloadDocument ? onClick : handleClick}\n      getRootRef={ref}\n      target={target}\n    ></Link>\n  );\n};\n\nexport const RouterLink = forwardRef(RouterLinkInner) as <T extends NavigationTarget>(\n  props: InjectParamsIfNeeded<T, RouterLinkProps<T>> & { ref?: Ref<HTMLAnchorElement> },\n) => JSX.Element;\n", "import { createPath, RelativeRoutingType } from '@remix-run/router';\nimport { HTMLAttributeAnchorTarget, MouseEvent as ReactMouseEvent, useCallback } from 'react';\nimport { useLocation, useRouteNavigator } from './hooks';\nimport { useResolvedPath } from './useResolvedPath';\nimport { InjectParamsIfNeeded } from '../page-types/common';\nimport { getPathFromTo } from '../utils';\nimport { NavigationTarget } from '../services';\n\ntype LimitedMouseEvent = Pick<MouseEvent, 'button' | 'metaKey' | 'altKey' | 'ctrlKey' | 'shiftKey'>;\n\nexport type UseClickHandlerOptions<T extends NavigationTarget> = InjectParamsIfNeeded<\n  T,\n  {\n    target?: HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  }\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent): boolean {\n  return Boolean(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(event: LimitedMouseEvent, target?: string): boolean {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === '_self') && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport function useLinkClickHandler<\n  T extends NavigationTarget,\n  E extends Element = HTMLAnchorElement,\n>(\n  to: T,\n  { target, replace: replaceProp, preventScrollReset, relative, params }: UseClickHandlerOptions<T>,\n): (event: ReactMouseEvent<E>) => void {\n  const navigator = useRouteNavigator();\n  const location = useLocation();\n\n  const path = useResolvedPath(getPathFromTo({ to, params, defaultPathname: location.pathname }), {\n    relative,\n  });\n\n  return useCallback(\n    (event: ReactMouseEvent<E>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        const toPath = createPath(path);\n        const replace = replaceProp !== undefined ? replaceProp : createPath(location) === toPath;\n\n        if (replace) {\n          navigator.replace(toPath);\n        } else {\n          navigator.push(toPath);\n        }\n      }\n    },\n    [location, navigator, path, replaceProp, target, to, preventScrollReset, relative],\n  );\n}\n", "import { useThrottledContext } from './useThrottledContext';\nimport { RouteContext } from '../contexts';\n\nexport function useGetPanelForView(view?: string): string | undefined {\n  const [routeContext, prevRouteContext] = useThrottledContext(RouteContext);\n  const { match } = routeContext;\n  const route = match?.route;\n  const routeForPanel =\n    view && prevRouteContext?.match?.route.view === view && route?.view !== view\n      ? prevRouteContext.match.route\n      : route;\n  return routeForPanel?.panel;\n}\n", "import { useLocation } from './hooks';\nimport { RelativeRoutingType } from '@remix-run/router';\nimport { useCallback, useContext, useMemo, useRef } from 'react';\nimport {\n  createSearchParams,\n  getSearchParamsForLocation,\n  URLSearchParamsInit,\n} from '../utils/createSearchParams';\nimport { RouterContext } from '../contexts';\nimport { warning } from '../utils/utils';\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\nexport type SetURLSearchParams = (\n  nextInit?: URLSearchParamsInit | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions,\n) => void;\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit,\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== 'undefined',\n    'You cannot use the `useSearchParams` hook in a browser that does not ' +\n      'support the URLSearchParams API. If you need to support Internet ' +\n      'Explorer 11, we recommend you load a polyfill such as ' +\n      'https://github.com/ungap/url-search-params\\n\\n' +\n      \"If you're unsure how to load polyfills, we recommend you check out \" +\n      'https://polyfill.io/v3/ which provides some recommendations about how ' +\n      'to load polyfills only for users that need them, instead of for every ' +\n      'user.',\n  );\n\n  let defaultSearchParamsRef = useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = useRef(false);\n\n  let location = useLocation();\n  let searchParams = useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current,\n      ),\n    [location.search],\n  );\n\n  let router = useContext(RouterContext).router;\n  let setSearchParams = useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === 'function' ? nextInit(searchParams) : nextInit,\n      );\n      hasSetSearchParamsRef.current = true;\n      router.navigate(`${location.pathname}?${newSearchParams}`, navigateOptions);\n    },\n    [router, searchParams, location.pathname],\n  );\n\n  return [searchParams, setSearchParams];\n}\n", "import { useLocation } from './hooks';\n\n/**\n * A hook for transferring state between pages\n */\nexport function useMetaParams<T extends Object>(): T | null {\n  const location = useLocation();\n  return location.state as T;\n}\n", "import { useContext } from 'react';\nimport { RouterContext } from '../contexts';\nimport { invariant } from '../utils/utils';\n\nexport function useFirstPageCheck(): boolean {\n  const routerContext = useContext(RouterContext);\n  invariant(\n    routerContext,\n    'You can not use useFirstPageCheck hook outside of RouteContext. Make sure calling it inside RouterProvider.',\n  );\n  return routerContext.viewHistory.isFirstPage;\n}\n", "import { RouteContext } from '../contexts';\nimport { STATE_KEY_SHOW_MODAL } from '../const';\nimport { usePopout } from './hooks';\nimport { useThrottledContext } from './useThrottledContext';\n\nexport interface ActiveVkuiLocationObject {\n  root?: string;\n  view?: string;\n  panel?: string;\n  tab?: string;\n  modal?: string;\n  hasOverlay: boolean;\n  panelsHistory: string[];\n}\n\nexport function useActiveVkuiLocation(): ActiveVkuiLocationObject {\n  const [routeContext] = useThrottledContext(RouteContext);\n  const popout = usePopout();\n  const { match, state, panelsHistory } = routeContext;\n  const route = match?.route;\n  const modal =\n    state.location.state?.[STATE_KEY_SHOW_MODAL] ??\n    (route && 'modal' in route ? route.modal : undefined);\n  return {\n    root: route && 'root' in route ? route.root : undefined,\n    view: route?.view,\n    panel: route?.panel,\n    tab: route?.tab,\n    modal,\n    hasOverlay: Boolean(modal || popout),\n    panelsHistory,\n  };\n}\n", "import { useEffect, useRef } from 'react';\nimport { BridgeService } from '../services/BridgeService';\n\nexport function useEnableSwipeBack() {\n  const consumerId = useRef<string | null>(null);\n\n  useEffect(() => {\n    consumerId.current = BridgeService.enableNativeSwipeBack();\n\n    return () => {\n      if (consumerId.current !== null) {\n        BridgeService.disableNativeSwipeBack(consumerId.current);\n      }\n    };\n  }, []);\n}\n", "import { BlockerFunction, IDLE_BLOCKER } from '@remix-run/router';\nimport { useRouteNavigator } from './hooks';\nimport { useEffect, useRef } from 'react';\nimport { useThrottledContext } from './useThrottledContext';\nimport { RouteContext } from '../contexts';\nimport { NAVIGATION_BLOCKER_KEY } from '../const';\n\nexport function useBlocker(blocker: BlockerFunction) {\n  const routeNavigator = useRouteNavigator();\n  const [routeContext] = useThrottledContext(RouteContext);\n  const unblocker = useRef<() => void>();\n\n  useEffect(() => {\n    if (unblocker.current) unblocker.current();\n    unblocker.current = routeNavigator.block(blocker);\n\n    return () => unblocker.current && unblocker.current();\n  }, [blocker, routeNavigator]);\n\n  return routeContext.state.blockers.get(NAVIGATION_BLOCKER_KEY) ?? IDLE_BLOCKER;\n}\n", "import { ActiveVkuiLocationObject, useActiveVkuiLocation } from '../hooks/useActiveVkuiLocation';\nimport { RouteNavigator } from '../services/RouteNavigator.type';\nimport { ComponentType } from 'react';\nimport { getDisplayName } from '../utils/utils';\nimport { useParams, usePopout, useRouteNavigator } from '../hooks/hooks';\nimport { Params } from '@remix-run/router';\nimport { useFirstPageCheck } from '../hooks/useFirstPageCheck';\nimport { SetURLSearchParams, useSearchParams } from '../hooks/useSearchParams';\n\ntype RouterProps = {\n  location: ActiveVkuiLocationObject;\n  routeNavigator: RouteNavigator;\n  popout: JSX.Element | null;\n  isFirstPage: boolean;\n  params?: Params;\n  searchParams: URLSearchParams;\n  setSearchParams: SetURLSearchParams;\n};\n\n/**\n * HOC для добавления свойств\n *\n * location: {@link ActiveVkuiLocationObject}\n *\n * routeNavigator: {@link RouteNavigator}\n *\n * popout: {@link JSX.Element}\n *\n * params: {@link Params}\n *\n * isFirstPage: boolean\n *\n * searchParams: {@link URLSearchParams}\n *\n * setSearchParams: {@link SetURLSearchParams}\n *\n * в переданный компонент\n *\n * ```typescript\n * export default withRouter(App);\n * ```\n * @param Component\n */\nexport function withRouter<T extends RouterProps>(\n  Component: ComponentType<T>,\n): ComponentType<Omit<T, keyof RouterProps>> {\n  function WithRouter(props: Omit<T, keyof RouterProps>) {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const routerProps: RouterProps = {\n      routeNavigator: useRouteNavigator(),\n      location: useActiveVkuiLocation(),\n      popout: usePopout(),\n      params: useParams(),\n      isFirstPage: useFirstPageCheck(),\n      searchParams,\n      setSearchParams,\n    };\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const propsWithRouter: T = {\n      ...props,\n      ...routerProps,\n    } as T;\n    return <Component {...propsWithRouter} />;\n  }\n\n  WithRouter.displayName = `WithRouter(${getDisplayName(Component)})`;\n  return WithRouter;\n}\n", "import { Params } from \"@remix-run/router\";\nimport { ExtendedPathWithParams } from \"../services\";\n\nexport type WithChildren<Target extends {}, Children extends {}> = Target & {\n  [key in keyof Children]: Children[key];\n};\n\nexport interface HasId<T extends string = string> {\n  id: T;\n}\n\nexport interface HasChildren<T extends {}> {\n  get children(): T[];\n}\n\nexport interface RepresentsRoutes<T> {\n  getRoutes(): T[];\n}\n\nexport type GetId<Obj extends HasId> = Obj extends { id: infer X } ? X : never;\n\nexport type AddChild<Target extends {}, V extends HasId> = WithChildren<Target, { [key in UniqueKey<Target, GetId<V>>]: V }>;\n\nexport interface Page {\n  path: string;\n  hasParams: false;\n}\n\nexport type WithParams<T extends string> = {\n  paramKeys: readonly T[];\n};\n\nexport interface PageWithParams<T extends string> extends WithParams<T> {\n  path: string;\n  hasParams: true;\n}\n\ntype IsEmptyKey<K extends string> = '' extends K ? true : false;\ntype KeyExists<Obj, K extends string> = K extends keyof Obj ? true : false;\ntype KeyWithZeroExists<Obj, K extends string> = `${K}_0` extends keyof Obj ? true : false;\n\ntype UniqueKey<Obj extends {}, K extends string> =\n  IsEmptyKey<K> extends true\n    ? K\n    : KeyExists<Obj, K> extends true\n      ? KeyWithZeroExists<Obj, K> extends true\n        ? UniqueKey<Obj, `${K}_0`>\n        : `${K}_0`\n      : K;\n\nexport function uniqueKey<Obj extends {}, K extends string>(target: Obj, key: K): UniqueKey<Obj, K> {\n  if (key && key.length && typeof target === 'object') {\n    if (target.hasOwnProperty(key)) {\n      const extendedKey = `${key}_0`;\n      return (target.hasOwnProperty(extendedKey) ? uniqueKey(target, extendedKey) : extendedKey) as UniqueKey<Obj, K>;\n    }\n  }\n  return key as UniqueKey<Obj, K>;\n}\n\nexport type InjectParamsIfNeeded<T, Base extends object> = T extends (PageWithParams<infer U> | ExtendedPathWithParams<infer U>)\n  ? Base & { params: Params<U> }\n  : Base & { params?: Params };\n", "import { AnyPanel } from './PanelPage';\nimport { AddChild, HasChildren, HasId, RepresentsRoutes, uniqueKey } from './common';\nimport { CommonRouteObject } from '../type';\n\ninterface ViewRoutePartial extends CommonRouteObject {\n  view: string;\n  panel: string;\n  modal?: string;\n}\n\nexport class ViewConfig<T extends string> implements HasId<T>, HasChildren<AnyPanel>, RepresentsRoutes<ViewRoutePartial> {\n  constructor(public id: T, private panels: AnyPanel[]) {\n    panels.forEach((panel) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this[uniqueKey(this, panel.id)] = panel;\n    });\n  }\n\n  get children(): AnyPanel[] {\n    return this.panels;\n  }\n\n  getRoutes(): ViewRoutePartial[] {\n    return this.panels\n      .map((panel) => panel.getRoutes())\n      .flat()\n      .map((panelRoute) => ({ ...panelRoute, view: this.id }));\n  }\n}\n\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel, K extends AnyPanel, L extends AnyPanel, M extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J, K, L, M]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>, K>, L>, M>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel, K extends AnyPanel, L extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J, K, L]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>, K>, L>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel, K extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J, K]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>, K>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n  J extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I, J]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel, I extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H, I]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel, H extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G, H]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>, H>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel, G extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F, G]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>, G>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel, F extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E, F]): AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<ViewConfig<T>, A>, B>, C>, D>, E>, F>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n  E extends AnyPanel,\n>(id: T, panels: [A, B, C, D, E]): AddChild<AddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>, E>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel, D extends AnyPanel,\n>(id: T, panels: [A, B, C, D]): AddChild<AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>, D>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel, C extends AnyPanel,\n>(id: T, panels: [A, B, C]): AddChild<AddChild<AddChild<ViewConfig<T>, A>, B>, C>;\nexport function createView<\n  T extends string, A extends AnyPanel, B extends AnyPanel,\n>(id: T, panels: [A, B]): AddChild<AddChild<ViewConfig<T>, A>, B>;\nexport function createView<T extends string, A extends AnyPanel>(id: T, panels: [A]): AddChild<ViewConfig<T>, A>;\nexport function createView<T extends string>(id: T, panels: AnyPanel[]): ViewConfig<T>;\nexport function createView<T extends string>(id: T, panels: AnyPanel[]): ViewConfig<T> {\n  return new ViewConfig<T>(id, panels);\n}\n", "import { ViewConfig } from './ViewConfig';\nimport { AddChild, HasChildren, HasId, RepresentsRoutes, uniqueKey } from './common';\nimport { CommonRouteObject } from '../type';\n\ninterface RootRoutePartial extends CommonRouteObject {\n  root: string;\n  view: string;\n  panel: string;\n  modal?: string;\n}\n\nexport class RootConfig<T extends string> implements HasId<T>, HasChildren<ViewConfig<string>>, RepresentsRoutes<RootRoutePartial> {\n  constructor(public id: T, private views: ViewConfig<string>[]) {\n    if (!views.length) {\n      throw new Error(`Trying to create root ${id} without views. Root must have at least one view.`);\n    }\n    views.forEach((views) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this[uniqueKey(this, views.id)] = views;\n    });\n  }\n\n  get children(): ViewConfig<string>[] {\n    return this.views;\n  }\n\n  getRoutes(): RootRoutePartial[] {\n    return this.views\n      .map((view) => view.getRoutes())\n      .flat()\n      .map((viewRoute) => ({ ...viewRoute, root: this.id }));\n  }\n}\n\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n  E extends ViewConfig<any>, F extends ViewConfig<any>, G extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D, E, F, G]): AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<RootConfig<T>, A>, B>, C>, D>, E>, F>, G>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n  E extends ViewConfig<any>, F extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D, E, F]): AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<RootConfig<T>, A>, B>, C>, D>, E>, F>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n  E extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D, E]): AddChild<AddChild<AddChild<AddChild<AddChild<RootConfig<T>, A>, B>, C>, D>, E>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>, D extends ViewConfig<any>,\n>(id: T, panels: [A, B, C, D]): AddChild<AddChild<AddChild<AddChild<RootConfig<T>, A>, B>, C>, D>;\nexport function createRoot<\n  T extends string, A extends ViewConfig<any>, B extends ViewConfig<any>, C extends ViewConfig<any>,\n>(id: T, panels: [A, B, C]): AddChild<AddChild<AddChild<RootConfig<T>, A>, B>, C>;\nexport function createRoot<T extends string,\n  A extends ViewConfig<any>, B extends ViewConfig<any>,\n>(id: T, views: [A, B]): AddChild<AddChild<RootConfig<T>, A>, B>;\nexport function createRoot<T extends string, A extends ViewConfig<any>>(id: T, views: [A]): AddChild<RootConfig<T>, A>;\nexport function createRoot<T extends string>(id: T, views: ViewConfig<any>[]): RootConfig<T>;\nexport function createRoot<T extends string>(id: T, views: any[]): RootConfig<T> {\n  return new RootConfig<T>(id, views);\n}\n", "import { AddChild, HasId, Page, PageWithParams, RepresentsRoutes, uniqueKey } from './common';\nimport { AnyModalPage } from './ModalPage';\nimport { CommonRouteObject } from '../type';\nimport { AnyTabPage } from './TabPage';\n\ninterface PanelRoutePartial extends CommonRouteObject {\n  panel: string;\n  tab?: string;\n  modal?: string;\n}\n\ntype AnySubPage = AnyModalPage | AnyTabPage;\n\nabstract class BasePanelPage<I extends string> implements RepresentsRoutes<PanelRoutePartial>, HasId<I> {\n  protected constructor(public id: I, public path: string, protected modals: AnySubPage[]) {\n    modals.forEach((modal) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this[uniqueKey(this, modal.id)] = modal;\n    });\n  }\n\n  getRoutes(): PanelRoutePartial[] {\n    return this.modals\n      .map((modalOrTab) => modalOrTab.getRoutes())\n      .flat()\n      .map((route): PanelRoutePartial => ({ ...route, panel: this.id }))\n      .concat({\n        path: this.path,\n        panel: this.id,\n      });\n  }\n}\n\nexport class PanelPage<I extends string> extends BasePanelPage<I> implements Page, HasId<I> {\n  hasParams: false = false;\n  constructor(id: I, public path: string, modals: AnySubPage[] = []) {\n    super(id, path, modals);\n  }\n}\n\nexport class PanelPageWithParams<I extends string, T extends string> extends BasePanelPage<I> implements PageWithParams<T>, HasId<I> {\n  hasParams: true = true;\n  constructor(public id: I, public path: string, public paramKeys: readonly T[], modals: AnySubPage[] = []) {\n    super(id, path, modals);\n  }\n}\n\nexport type AnyPanel = PanelPage<any> | PanelPageWithParams<any, any>;\n\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage, J extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I, J]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>, H>, I>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>, H>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>, G>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>, F>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E]):\nAddChild<AddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>, E>;\nexport function createPanel<\n  T extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D]):\nAddChild<AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>, D>;\nexport function createPanel<\n  T extends string, A extends AnySubPage, B extends AnySubPage, C extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C]): AddChild<AddChild<AddChild<PanelPage<T>, A>, B>, C>;\nexport function createPanel<\n  T extends string, A extends AnySubPage, B extends AnySubPage,\n>(id: T, path: string, modals: [A, B]): AddChild<AddChild<PanelPage<T>, A>, B>;\nexport function createPanel<T extends string, A extends AnySubPage>(id: T, path: string, modals: [A]): AddChild<PanelPage<T>, A>;\nexport function createPanel<T extends string>(id: T, path: string, modals?: AnySubPage[]): PanelPage<T>;\n\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage, J extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I, J], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>, H>, I>, J>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n  I extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H, I], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<\nAddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>, H>, I>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage, H extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G, H], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>, H>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage, G extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F, G], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>, G>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage, F extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>, F>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n  E extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D, E], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>, E>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage, D extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C, D], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>, D>;\nexport function createPanel<\n  T extends string, P extends string,\n  A extends AnySubPage, B extends AnySubPage, C extends AnySubPage,\n>(id: T, path: string, modals: [A, B, C], paramKeys: readonly P[]): AddChild<AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>, C>;\nexport function createPanel<\n  T extends string, P extends string, A extends AnySubPage, B extends AnySubPage,\n>(id: T, path: string, modals: [A, B], paramKeys: readonly P[]): AddChild<AddChild<PanelPageWithParams<T, P>, A>, B>;\nexport function createPanel<\n  T extends string, P extends string, A extends AnySubPage,\n>(id: T, path: string, modals: [A], paramKeys: readonly P[]): AddChild<PanelPageWithParams<T, P>, A>;\nexport function createPanel<T extends string, P extends string>(id: T, path: string, modals: AnySubPage[], paramKeys: readonly P[]): PanelPageWithParams<T, P>;\nexport function createPanel<T extends string, P extends string>(id: T, path: string, modals?: AnySubPage[], paramKeys?: readonly P[]):\nPanelPage<T> | PanelPageWithParams<T, P> {\n  if (paramKeys) {\n    return new PanelPageWithParams(id, path, paramKeys, modals ?? []);\n  }\n  return new PanelPage(id, path, modals ?? []);\n}\n", "import { HasId, Page, PageWithParams, RepresentsRoutes } from './common';\nimport { CommonRouteObject } from '../type';\n\ninterface ModalRoutePartial extends CommonRouteObject {\n  modal: string;\n}\n\nexport class ModalPage<I extends string> implements Page, RepresentsRoutes<ModalRoutePartial>, HasId<I> {\n  hasParams: false = false;\n  constructor(public id: I, public path: string) {}\n\n  getRoutes(): ModalRoutePartial[] {\n    return [{\n      path: this.path,\n      modal: this.id,\n    }];\n  }\n}\n\nexport class ModalPageWithParams<I extends string, T extends string> implements PageWithParams<T>, RepresentsRoutes<ModalRoutePartial>, HasId<I> {\n  hasParams: true = true;\n  constructor(public id: I, public path: string, public paramKeys: readonly T[]) {}\n\n  getRoutes(): ModalRoutePartial[] {\n    return [{\n      path: this.path,\n      modal: this.id,\n    }];\n  }\n}\n\nexport function createModal<T extends string>(id: T, path: string): ModalPage<T>;\nexport function createModal<T extends string, P extends string>(id: T, path: string, paramKeys: readonly P[]): ModalPageWithParams<T, P>;\nexport function createModal<T extends string, P extends string>(id: T, path: string, paramKeys?: readonly P[]):\nModalPage<T> | ModalPageWithParams<T, P> {\n  if (paramKeys) {\n    return new ModalPageWithParams(id, path, paramKeys);\n  }\n  return new ModalPage(id, path);\n}\n\nexport type AnyModalPage = ModalPage<string> | ModalPageWithParams<string, string>;\n", "import { AddChild, HasId, Page, PageWithParams, RepresentsRoutes, uniqueKey } from './common';\nimport { AnyModalPage } from './ModalPage';\nimport { CommonRouteObject } from '../type';\n\ninterface TabRoutePartial extends CommonRouteObject {\n  tab: string;\n  modal?: string;\n}\n\nabstract class BaseTabPage<I extends string> implements RepresentsRoutes<TabRoutePartial>, HasId<I> {\n  protected constructor(public id: I, public path: string, protected modals: AnyModalPage[]) {\n    modals.forEach((modal) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      this[uniqueKey(this, modal.id)] = modal;\n    });\n  }\n\n  getRoutes(): TabRoutePartial[] {\n    return this.modals\n      .map((modal) => modal.getRoutes())\n      .flat()\n      .map((route): TabRoutePartial => ({ ...route, tab: this.id }))\n      .concat({\n        path: this.path,\n        tab: this.id,\n      });\n  }\n}\n\nexport class TabPage<I extends string> extends BaseTabPage<I> implements Page, HasId<I> {\n  hasParams: false = false;\n  constructor(id: I, public path: string, modals: AnyModalPage[] = []) {\n    super(id, path, modals);\n  }\n}\n\nexport class TabPageWithParams<I extends string, T extends string> extends BaseTabPage<I> implements PageWithParams<T>, HasId<I> {\n  hasParams: true = true;\n  constructor(public id: I, public path: string, public paramKeys: readonly T[], modals: AnyModalPage[] = []) {\n    super(id, path, modals);\n  }\n}\n\nexport type AnyTabPage = TabPage<any> | TabPageWithParams<any, any>;\n\nexport function createTab<\n  T extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage, D extends AnyModalPage,\n  E extends AnyModalPage, F extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<TabPage<T>, A>, B>, C>, D>, E>, F>;\nexport function createTab<\n  T extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage, D extends AnyModalPage,\n  E extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C, D, E]):\nAddChild<AddChild<AddChild<AddChild<AddChild<TabPage<T>, A>, B>, C>, D>, E>;\nexport function createTab<\n  T extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage, D extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C, D]):\nAddChild<AddChild<AddChild<AddChild<TabPage<T>, A>, B>, C>, D>;\nexport function createTab<\n  T extends string, A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C]): AddChild<AddChild<AddChild<TabPage<T>, A>, B>, C>;\nexport function createTab<\n  T extends string, A extends AnyModalPage, B extends AnyModalPage,\n>(id: T, path: string, modals: [A, B]): AddChild<AddChild<TabPage<T>, A>, B>;\nexport function createTab<T extends string, A extends AnyModalPage>(id: T, path: string, modals: [A]): AddChild<TabPage<T>, A>;\nexport function createTab<T extends string>(id: T, path: string, modals?: AnyModalPage[]): TabPage<T>;\n\nexport function createTab<\n  T extends string, P extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage, D extends AnyModalPage,\n  E extends AnyModalPage, F extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C, D, E, F], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<AddChild<TabPageWithParams<T, P>, A>, B>, C>, D>, E>, F>;\nexport function createTab<\n  T extends string, P extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage, D extends AnyModalPage,\n  E extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C, D, E], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<AddChild<TabPageWithParams<T, P>, A>, B>, C>, D>, E>;\nexport function createTab<\n  T extends string, P extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage, D extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C, D], paramKeys: readonly P[]):\nAddChild<AddChild<AddChild<AddChild<TabPageWithParams<T, P>, A>, B>, C>, D>;\nexport function createTab<\n  T extends string, P extends string,\n  A extends AnyModalPage, B extends AnyModalPage, C extends AnyModalPage,\n>(id: T, path: string, modals: [A, B, C], paramKeys: readonly P[]): AddChild<AddChild<AddChild<TabPageWithParams<T, P>, A>, B>, C>;\nexport function createTab<\n  T extends string, P extends string, A extends AnyModalPage, B extends AnyModalPage,\n>(id: T, path: string, modals: [A, B], paramKeys: readonly P[]): AddChild<AddChild<TabPageWithParams<T, P>, A>, B>;\nexport function createTab<\n  T extends string, P extends string, A extends AnyModalPage,\n>(id: T, path: string, modals: [A], paramKeys: readonly P[]): AddChild<TabPageWithParams<T, P>, A>;\nexport function createTab<T extends string, P extends string>(id: T, path: string, modals: AnyModalPage[], paramKeys: readonly P[]): TabPageWithParams<T, P>;\nexport function createTab<T extends string, P extends string>(id: T, path: string, modals?: AnyModalPage[], paramKeys?: readonly P[]):\nTabPage<T> | TabPageWithParams<T, P> {\n  if (paramKeys) {\n    return new TabPageWithParams(id, path, paramKeys, modals ?? []);\n  }\n  return new TabPage(id, path, modals ?? []);\n}\n", "import { RootConfig } from './RootConfig';\nimport { ViewConfig } from './ViewConfig';\nimport { AddChild, RepresentsRoutes, uniqueKey } from './common';\nimport { CommonRouteObject } from '../type';\n\ninterface RoutePartial extends CommonRouteObject {\n  root?: string;\n  view: string;\n  panel: string;\n  modal?: string;\n  tab?: string;\n}\n\nexport class RoutesConfig implements RepresentsRoutes<RoutePartial> {\n  private items: ViewConfig<string>[] | RootConfig<string>[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  getRoutes(): RoutePartial[] {\n    return this.items.map((item) => item.getRoutes()).flat();\n  }\n\n  static create<\n    A extends RootConfig<string>, B extends RootConfig<string>, C extends RootConfig<string>, D extends RootConfig<string>,\n    E extends RootConfig<string>\n  >(routes: [A, B, C, D, E]): AddChild<AddChild<AddChild<AddChild<AddChild<RoutesConfig, A>, B>, C>, D>, E>\n  static create<\n    A extends RootConfig<string>, B extends RootConfig<string>, C extends RootConfig<string>, D extends RootConfig<string>\n  >(routes: [A, B, C, D]): AddChild<AddChild<AddChild<AddChild<RoutesConfig, A>, B>, C>, D>\n  static create<\n    A extends RootConfig<string>, B extends RootConfig<string>, C extends RootConfig<string>\n  >(routes: [A, B, C]): AddChild<AddChild<AddChild<RoutesConfig, A>, B>, C>\n  static create<A extends RootConfig<string>, B extends RootConfig<string>>(routes: [A, B]): AddChild<AddChild<RoutesConfig, A>, B>\n  static create<A extends RootConfig<string>>(routes: [A]): AddChild<RoutesConfig, A>\n\n  static create<\n    A extends ViewConfig<string>, B extends ViewConfig<string>, C extends ViewConfig<string>, D extends ViewConfig<string>,\n    E extends ViewConfig<string>\n  >(routes: [A, B, C, D, E]): AddChild<AddChild<AddChild<AddChild<AddChild<RoutesConfig, A>, B>, C>, D>, E>\n  static create<\n    A extends ViewConfig<string>, B extends ViewConfig<string>, C extends ViewConfig<string>, D extends ViewConfig<string>\n  >(routes: [A, B, C, D]): AddChild<AddChild<AddChild<AddChild<RoutesConfig, A>, B>, C>, D>\n  static create<\n    A extends ViewConfig<string>, B extends ViewConfig<string>, C extends ViewConfig<string>\n  >(routes: [A, B, C]): AddChild<AddChild<AddChild<RoutesConfig, A>, B>, C>\n  static create<A extends ViewConfig<string>, B extends ViewConfig<string>>(routes: [A, B]): AddChild<AddChild<RoutesConfig, A>, B>\n  static create<A extends ViewConfig<string>>(routes: [A]): AddChild<RoutesConfig, A>\n  static create(routes: ViewConfig<string>[] | RootConfig<string>[]): RoutesConfig {\n    const config = new RoutesConfig();\n    config.items = routes;\n    routes.forEach((route) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      config[uniqueKey(config, route.id)] = route;\n    });\n    return config;\n  }\n}\n", "import { createView as cv } from './ViewConfig';\n//  В Webpack есть особенность, которая не позволяет подключить библиотеку при наличии файла с одними ре-экспортами.\nexport const createView = cv;\nexport { createRoot } from './RootConfig';\nexport { createPanel } from './PanelPage';\nexport { createModal } from './ModalPage';\nexport { createTab } from './TabPage';\nexport { RoutesConfig } from './RoutesConfig';\n"],
  "mappings": "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",
  "names": ["import_react", "Action", "PopStateEventType", "createBrowserHistory", "options", "createBrowserLocation", "window", "globalHistory", "pathname", "search", "hash", "location", "createLocation", "state", "usr", "key", "createBrowserHref", "to", "createPath", "getUrlBasedHistory", "createHashHistory", "createHashLocation", "parsePath", "substr", "startsWith", "createHashHref", "base", "document", "querySelector", "href", "getAttribute", "url", "hashIndex", "indexOf", "slice", "validateHashLocation", "warning", "charAt", "JSON", "stringify", "invariant", "value", "message", "Error", "cond", "console", "warn", "e", "createKey", "Math", "random", "toString", "getHistoryState", "index", "idx", "current", "_extends", "_ref", "path", "parsedPath", "searchIndex", "getLocation", "createHref", "validateLocation", "defaultView", "v5Compat", "history", "action", "Action", "Pop", "listener", "getIndex", "replaceState", "handlePop", "nextIndex", "delta", "push", "Push", "historyState", "pushState", "error", "DOMException", "name", "assign", "replace", "Replace", "createURL", "origin", "URL", "listen", "fn", "addEventListener", "PopStateEventType", "removeEventListener", "encodeLocation", "go", "n", "ResultType", "immutableRouteKeys", "Set", "isIndexRoute", "route", "convertRoutesToDataRoutes", "routes", "mapRouteProperties", "parentPath", "manifest", "map", "treePath", "String", "id", "join", "children", "indexRoute", "pathOrLayoutRoute", "undefined", "matchRoutes", "locationArg", "basename", "matchRoutesImpl", "allowPartial", "stripBasename", "branches", "flattenRoutes", "rankRouteBranches", "matches", "i", "length", "decoded", "decodePath", "matchRouteBranch", "convertRouteMatchToUiMatch", "match", "loaderData", "params", "data", "handle", "parentsMeta", "flattenRoute", "relativePath", "meta", "caseSensitive", "childrenIndex", "joinPaths", "routesMeta", "concat", "score", "computeScore", "forEach", "_route$path", "includes", "exploded", "explodeOptionalSegments", "segments", "split", "first", "rest", "isOptional", "endsWith", "required", "restExploded", "result", "subpath", "sort", "a", "b", "compareIndexes", "paramRe", "dynamicSegmentValue", "indexRouteValue", "emptySegmentValue", "staticSegmentValue", "splatPenalty", "isSplat", "s", "initialScore", "some", "filter", "reduce", "segment", "test", "siblings", "every", "branch", "matchedParams", "matchedPathname", "end", "remainingPathname", "matchPath", "Object", "pathnameBase", "normalizePathname", "matchPath", "pattern", "pathname", "path", "caseSensitive", "end", "matcher", "compiledParams", "compilePath", "match", "matchedPathname", "pathnameBase", "replace", "captureGroups", "slice", "params", "reduce", "memo", "_ref", "index", "paramName", "isOptional", "splatValue", "length", "value", "undefined", "warning", "endsWith", "regexpSource", "_", "push", "RegExp", "decodePath", "split", "map", "v", "decodeURIComponent", "join", "error", "stripBasename", "basename", "toLowerCase", "startsWith", "startIndex", "nextChar", "charAt", "resolvePath", "to", "fromPathname", "toPathname", "search", "hash", "parsePath", "resolvePathname", "normalizeSearch", "normalizeHash", "relativePath", "segments", "relativeSegments", "forEach", "segment", "pop", "getInvalidPathError", "char", "field", "dest", "JSON", "stringify", "getPathContributingMatches", "matches", "filter", "route", "getResolveToMatches", "v7_relativeSplatPath", "pathMatches", "idx", "resolveTo", "toArg", "routePathnames", "locationPathname", "isPathRelative", "_extends", "invariant", "includes", "isEmptyPath", "from", "routePathnameIndex", "toSegments", "shift", "hasExplicitTrailingSlash", "hasCurrentTrailingSlash", "joinPaths", "paths", "join", "replace", "normalizePathname", "pathname", "normalizeSearch", "search", "startsWith", "normalizeHash", "hash", "ErrorResponseImpl", "constructor", "status", "statusText", "data", "internal", "Error", "toString", "error", "isRouteErrorResponse", "validMutationMethodsArr", "validMutationMethods", "Set", "validRequestMethodsArr", "validRequestMethods", "redirectStatusCodes", "redirectPreserveMethodStatusCodes", "IDLE_NAVIGATION", "state", "location", "undefined", "formMethod", "formAction", "formEncType", "formData", "json", "text", "IDLE_FETCHER", "IDLE_BLOCKER", "proceed", "reset", "ABSOLUTE_URL_REGEX", "defaultMapRouteProperties", "route", "hasErrorBoundary", "Boolean", "TRANSITIONS_STORAGE_KEY", "createRouter", "init", "routerWindow", "window", "isBrowser", "document", "createElement", "isServer", "invariant", "routes", "length", "mapRouteProperties", "detectErrorBoundary", "manifest", "dataRoutes", "convertRoutesToDataRoutes", "inFlightDataRoutes", "basename", "dataStrategyImpl", "unstable_dataStrategy", "defaultDataStrategy", "patchRoutesOnNavigationImpl", "unstable_patchRoutesOnNavigation", "future", "_extends", "v7_fetcherPersist", "v7_normalizeFormMethod", "v7_partialHydration", "v7_prependBasename", "v7_relativeSplatPath", "v7_skipActionErrorRevalidation", "unlistenHistory", "subscribers", "discoveredRoutesMaxSize", "discoveredRoutes", "savedScrollPositions", "getScrollRestorationKey", "getScrollPosition", "initialScrollRestored", "hydrationData", "initialMatches", "matchRoutes", "history", "initialErrors", "getInternalRouterError", "pathname", "matches", "getShortCircuitMatches", "id", "fogOfWar", "checkFogOfWar", "active", "initialized", "some", "m", "lazy", "loader", "loaderData", "errors", "isRouteInitialized", "hydrate", "idx", "findIndex", "slice", "every", "router", "historyAction", "action", "navigation", "restoreScrollPosition", "preventScrollReset", "revalidation", "actionData", "fetchers", "Map", "blockers", "pendingAction", "HistoryAction", "Pop", "pendingPreventScrollReset", "pendingNavigationController", "pendingViewTransitionEnabled", "appliedViewTransitions", "removePageHideEventListener", "isUninterruptedRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "fetchControllers", "incrementingLoadId", "pendingNavigationLoadId", "fetchReloadIds", "fetchRedirectIds", "fetchLoadMatches", "activeFetchers", "deletedFetchers", "activeDeferreds", "blockerFunctions", "pendingPatchRoutes", "unblockBlockerHistoryUpdate", "initialize", "listen", "_ref", "delta", "warning", "size", "blockerKey", "shouldBlockNavigation", "currentLocation", "nextLocation", "nextHistoryUpdatePromise", "Promise", "resolve", "go", "updateBlocker", "then", "set", "updateState", "startNavigation", "restoreAppliedTransitions", "_saveAppliedTransitions", "persistAppliedTransitions", "addEventListener", "removeEventListener", "initialHydration", "dispose", "clear", "abort", "forEach", "_", "key", "deleteFetcher", "deleteBlocker", "subscribe", "fn", "add", "delete", "newState", "opts", "completedFetchers", "deletedFetchersKeys", "fetcher", "has", "push", "subscriber", "unstable_viewTransitionOpts", "viewTransitionOpts", "unstable_flushSync", "flushSync", "completeNavigation", "_temp", "_location$state", "_location$state2", "isActionReload", "isMutationMethod", "_isRedirect", "Object", "keys", "mergeLoaderData", "k", "Push", "Replace", "replace", "priorPaths", "get", "toPaths", "getSavedScrollPosition", "navigate", "to", "normalizedPath", "normalizeTo", "fromRouteId", "relative", "path", "submission", "normalizeNavigateOptions", "createLocation", "encodeLocation", "userReplace", "search", "pendingError", "enableViewTransition", "unstable_viewTransition", "revalidate", "interruptActiveLoads", "startUninterruptedRevalidation", "overrideNavigation", "saveScrollPosition", "routesToUse", "loadingNavigation", "notFoundMatches", "handleNavigational404", "isHashChangeOnly", "AbortController", "request", "createClientSideRequest", "signal", "pendingActionResult", "findNearestBoundary", "type", "ResultType", "actionResult", "handleAction", "shortCircuited", "routeId", "result", "isErrorResult", "getLoadingNavigation", "url", "updatedMatches", "handleLoaders", "fetcherSubmission", "getActionDataForCommit", "isFogOfWar", "getSubmittingNavigation", "discoverResult", "discoverRoutes", "boundaryId", "handleDiscoverRouteError", "partialMatches", "actionMatch", "getTargetMatch", "method", "results", "callDataStrategy", "aborted", "isRedirectResult", "normalizeRedirectLocation", "response", "headers", "URL", "startRedirectNavigation", "isDeferredResult", "boundaryMatch", "activeSubmission", "getSubmissionFromNavigation", "shouldUpdateNavigationState", "getUpdatedActionData", "matchesToLoad", "revalidatingFetchers", "getMatchesToLoad", "cancelActiveDeferreds", "updatedFetchers", "markFetchRedirectsDone", "updates", "getUpdatedRevalidatingFetchers", "rf", "abortFetcher", "controller", "abortPendingFetchRevalidations", "f", "loaderResults", "fetcherResults", "callLoadersAndMaybeResolveData", "redirect", "findRedirect", "processLoaderData", "deferredData", "done", "entries", "filter", "_ref2", "_ref3", "assign", "didAbortFetchLoads", "abortStaleFetchLoads", "shouldUpdateFetchers", "revalidatingFetcher", "getLoadingFetcher", "fetch", "href", "setFetcherError", "match", "handleFetcherAction", "handleFetcherLoader", "requestMatches", "detectAndHandle405Error", "existingFetcher", "updateFetcherState", "getSubmittingFetcher", "abortController", "fetchRequest", "originatingLoadId", "actionResults", "getDoneFetcher", "revalidationRequest", "loadId", "loadFetcher", "staleKey", "r", "doneFetcher", "resolveDeferredData", "isNavigation", "_temp2", "redirectLocation", "isDocumentReload", "test", "createURL", "origin", "stripBasename", "redirectHistoryAction", "fetcherKey", "dataResults", "callDataStrategyImpl", "e", "isRedirectDataStrategyResultResult", "normalizeRelativeRoutingRedirectResponse", "convertDataStrategyResultToDataResult", "fetchersToLoad", "currentMatches", "loaderResultsPromise", "fetcherResultsPromise", "all", "map", "reduce", "acc", "resolveNavigationDeferredResults", "resolveFetcherDeferredResults", "getFetcher", "deleteFetcherAndUpdateState", "count", "markFetchersDone", "doneKeys", "landedId", "yeetedKeys", "getBlocker", "blocker", "newBlocker", "_ref4", "Array", "from", "blockerFunction", "message", "String", "predicate", "cancelledRouteIds", "dfd", "cancel", "enableScrollRestoration", "positions", "getPosition", "getKey", "y", "getScrollKey", "convertRouteMatchToUiMatch", "fogMatches", "matchRoutesImpl", "params", "isNonHMR", "loadLazyRouteChildren", "newMatches", "addToFifoQueue", "newPartialMatches", "i", "queue", "first", "values", "next", "value", "_internalSetRoutes", "newRoutes", "patchRoutes", "children", "patchRoutesImpl", "createHref", "_internalFetchControllers", "_internalActiveDeferreds", "UNSAFE_DEFERRED_SYMBOL", "Symbol", "isSubmissionNavigation", "opts", "formData", "body", "undefined", "normalizeTo", "location", "matches", "basename", "prependBasename", "to", "v7_relativeSplatPath", "fromRouteId", "relative", "contextualMatches", "activeRouteMatch", "match", "push", "route", "id", "length", "path", "resolveTo", "getResolveToMatches", "stripBasename", "pathname", "search", "hash", "index", "hasNakedIndexQuery", "replace", "joinPaths", "createPath", "normalizeNavigateOptions", "normalizeFormMethod", "isFetcher", "formMethod", "isValidMethod", "error", "getInternalRouterError", "method", "getInvalidBodyError", "type", "rawFormMethod", "toUpperCase", "toLowerCase", "formAction", "stripHashFromPath", "formEncType", "isMutationMethod", "text", "FormData", "URLSearchParams", "Array", "from", "entries", "reduce", "acc", "_ref5", "name", "value", "String", "submission", "json", "JSON", "parse", "e", "invariant", "searchParams", "convertFormDataToSearchParams", "convertSearchParamsToFormData", "parsedPath", "parsePath", "append", "getLoaderMatchesUntilBoundary", "boundaryId", "boundaryMatches", "findIndex", "m", "slice", "getMatchesToLoad", "history", "state", "isInitialLoad", "skipActionErrorRevalidation", "isRevalidationRequired", "cancelledDeferredRoutes", "cancelledFetcherLoads", "deletedFetchers", "fetchLoadMatches", "fetchRedirectIds", "routesToUse", "pendingActionResult", "actionResult", "isErrorResult", "data", "currentUrl", "createURL", "nextUrl", "actionStatus", "statusCode", "shouldSkipRevalidation", "navigationMatches", "filter", "lazy", "loader", "hydrate", "loaderData", "errors", "isNewLoader", "some", "currentRouteMatch", "nextRouteMatch", "shouldRevalidateLoader", "_extends", "currentParams", "params", "nextParams", "defaultShouldRevalidate", "isNewRouteInstance", "revalidatingFetchers", "forEach", "f", "key", "routeId", "has", "fetcherMatches", "matchRoutes", "controller", "fetcher", "fetchers", "get", "fetcherMatch", "getTargetMatch", "shouldRevalidate", "delete", "AbortController", "currentLoaderData", "currentMatch", "isNew", "isMissingData", "currentPath", "endsWith", "loaderMatch", "arg", "routeChoice", "loadLazyRouteChildren", "patchRoutesOnNavigationImpl", "routes", "manifest", "mapRouteProperties", "pendingRouteChildren", "signal", "map", "join", "pending", "patch", "children", "aborted", "patchRoutesImpl", "set", "isPromise", "_route$children", "dataChildren", "convertRoutesToDataRoutes", "loadLazyRouteModule", "lazyRoute", "routeToUpdate", "routeUpdates", "lazyRouteProperty", "staticRouteValue", "isPropertyStaticallyDefined", "warning", "immutableRouteKeys", "Object", "assign", "defaultDataStrategy", "_ref6", "matchesToLoad", "shouldLoad", "results", "Promise", "all", "resolve", "result", "i", "callDataStrategyImpl", "dataStrategyImpl", "request", "fetcherKey", "requestContext", "loadRouteDefinitionsPromises", "dsMatches", "loadRoutePromise", "handlerOverride", "callLoaderOrAction", "ResultType", "context", "staticContext", "onReject", "runHandler", "handler", "reject", "abortPromise", "_", "r", "addEventListener", "actualHandler", "ctx", "Error", "handlerPromise", "val", "race", "handlerError", "catch", "url", "URL", "removeEventListener", "convertDataStrategyResultToDataResult", "dataStrategyResult", "isResponse", "contentType", "headers", "test", "ErrorResponseImpl", "status", "statusText", "isDataWithResponseInit", "_result$init2", "_result$init", "init", "isRouteErrorResponse", "isDeferredData", "_result$init3", "_result$init4", "deferred", "deferredData", "Headers", "_result$init5", "_result$init6", "normalizeRelativeRoutingRedirectResponse", "response", "ABSOLUTE_URL_REGEX", "trimmedMatches", "normalizeRedirectLocation", "normalizedLocation", "startsWith", "protocol", "isSameBasename", "origin", "createClientSideRequest", "toString", "stringify", "Request", "processRouteLoaderData", "activeDeferreds", "skipLoaderErrorBubbling", "foundError", "loaderHeaders", "pendingError", "isRedirectResult", "boundaryMatch", "findNearestBoundary", "isDeferredResult", "processLoaderData", "fetcherResults", "rf", "doneFetcher", "getDoneFetcher", "mergeLoaderData", "newLoaderData", "mergedLoaderData", "hasOwnProperty", "getActionDataForCommit", "actionData", "eligibleMatches", "reverse", "find", "hasErrorBoundary", "getShortCircuitMatches", "pathnameBase", "_temp5", "message", "errorMessage", "findRedirect", "isHashChangeOnly", "a", "b", "isRedirectDataStrategyResultResult", "result", "isResponse", "redirectStatusCodes", "has", "status", "isDeferredResult", "type", "ResultType", "deferred", "isErrorResult", "error", "isRedirectResult", "redirect", "isDataWithResponseInit", "value", "isDeferredData", "data", "subscribe", "cancel", "resolveData", "statusText", "headers", "body", "isValidMethod", "method", "validRequestMethods", "has", "toLowerCase", "isMutationMethod", "validMutationMethods", "resolveNavigationDeferredResults", "matches", "results", "signal", "currentMatches", "currentLoaderData", "entries", "Object", "index", "length", "routeId", "result", "match", "find", "m", "route", "id", "currentMatch", "isRevalidatingLoader", "isNewRouteInstance", "undefined", "isDeferredResult", "resolveDeferredData", "then", "resolveFetcherDeferredResults", "revalidatingFetchers", "key", "controller", "invariant", "unwrap", "aborted", "deferredData", "resolveData", "type", "ResultType", "data", "unwrappedData", "e", "error", "hasNakedIndexQuery", "search", "URLSearchParams", "getAll", "some", "v", "getTargetMatch", "location", "parsePath", "pathMatches", "getPathContributingMatches", "getSubmissionFromNavigation", "navigation", "formMethod", "formAction", "formEncType", "text", "formData", "json", "getLoadingNavigation", "submission", "state", "getSubmittingNavigation", "getLoadingFetcher", "fetcher", "getSubmittingFetcher", "existingFetcher", "getDoneFetcher", "restoreAppliedTransitions", "_window", "transitions", "sessionPositions", "sessionStorage", "getItem", "TRANSITIONS_STORAGE_KEY", "JSON", "parse", "k", "Array", "isArray", "set", "Set", "persistAppliedTransitions", "size", "setItem", "stringify", "warning", "invariant", "createKey", "warning", "route", "createKey", "history", "createLocation", "createKey", "getHistoryState", "PopStateEventType", "getUrlBasedHistory", "window", "history", "createLocation", "getHistoryState", "invariant", "window", "createLocation", "warning", "getUrlBasedHistory", "createKey", "history", "createKey", "history", "createKey", "createKey", "import_react", "_jsx", "isPopoutShown", "_jsx", "_jsxs", "import_react", "import_react", "import_react", "prevValue", "import_react", "invariant", "getPathContributingMatches", "invariant", "import_react", "import_react", "ABSOLUTE_URL_REGEX", "_jsx", "import_react", "warning", "import_react", "invariant", "import_react", "import_react", "_jsx", "views", "createView"]
}
