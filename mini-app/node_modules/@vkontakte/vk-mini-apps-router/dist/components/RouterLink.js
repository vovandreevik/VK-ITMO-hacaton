import { jsx as _jsx } from "react/jsx-runtime";
import { Link } from '@vkontakte/vkui';
import { useHref } from '../hooks/useHref';
import { forwardRef, } from 'react';
import { useLinkClickHandler } from '../hooks/useLinkClickHandler';
import { isString } from '../utils';
const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const isBrowser = typeof window !== 'undefined' &&
    typeof window.document !== 'undefined' &&
    typeof window.document.createElement !== 'undefined';
const RouterLinkInner = ({ to, relative, replace, target, reloadDocument, params, onClick, ...rest }, ref) => {
    // Rendered into <a href> for absolute URLs
    let absoluteHref;
    let isExternal = false;
    let navigationTarget = to;
    if (isString(to) && ABSOLUTE_URL_REGEX.test(to)) {
        // Render the absolute href server- and client-side
        absoluteHref = to;
        // Only check for external origins client-side
        if (isBrowser) {
            const currentUrl = new URL(window.location.href);
            const targetUrl = to.startsWith('//') ? new URL(currentUrl.protocol + to) : new URL(to);
            const path = targetUrl.pathname;
            if (targetUrl.origin === currentUrl.origin) {
                // Strip the protocol/origin/basename for same-origin absolute URLs
                navigationTarget = path + targetUrl.search + targetUrl.hash;
            }
            else {
                isExternal = true;
            }
        }
    }
    const href = useHref(navigationTarget, { relative, params: params });
    const internalOnClick = useLinkClickHandler(navigationTarget, {
        replace,
        target,
        relative,
        params,
    });
    function handleClick(event) {
        if (onClick)
            onClick(event);
        if (!event.defaultPrevented) {
            internalOnClick(event);
        }
    }
    return (_jsx(Link, { ...rest, href: absoluteHref || href, onClick: isExternal || reloadDocument ? onClick : handleClick, getRootRef: ref, target: target }));
};
export const RouterLink = forwardRef(RouterLinkInner);
//# sourceMappingURL=RouterLink.js.map