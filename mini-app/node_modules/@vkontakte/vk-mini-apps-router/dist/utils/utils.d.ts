import { Location, Params, Path, RouterState } from '@remix-run/router';
import { RouteContextObject } from '../contexts';
import { ExtendedPath, ExtendedPathWithParams, NavigationTarget } from '../services';
import { Page, PageWithParams } from '../page-types/common';
export declare const isString: (tmp: unknown) => tmp is string;
export declare const isPageObject: (path: NavigationTarget) => path is PageWithParams<string> | Page;
export declare const isPageWithOptionsPath: (path: NavigationTarget) => path is ExtendedPathWithParams<string> | ExtendedPath | Partial<Path>;
export declare function getParamKeys(path: string | undefined): string[];
export declare function fillParamsIntoPath(path: string, params?: Params): string;
export declare function getRouteContext(state: RouterState, panelsHistory?: string[]): RouteContextObject;
export declare function isModalShown(location: Location): boolean;
export declare function isPopoutShown(location: Location): boolean;
export declare function createKey(): string;
export declare function getDisplayName(WrappedComponent: {
    displayName?: string;
    name?: string;
}): string;
export declare function warning(cond: any, message: string): void;
export declare function invariant(value: boolean, message?: string): asserts value;
export declare function invariant<T>(value: T | null | undefined, message?: string): asserts value is T;
export declare function extractPathFromNavigationTarget(to: NavigationTarget, defaultPathname?: string): string;
export declare function transformSearchParams(searchParams?: URLSearchParams | Record<string, string> | string): string;
export declare function getPathFromTo({ to, params, defaultPathname, }: {
    to: NavigationTarget;
    params?: Params;
    defaultPathname?: string;
}): string;
//# sourceMappingURL=utils.d.ts.map