import { createPath, } from '@remix-run/router';
import { STATE_KEY_SHOW_MODAL, STATE_KEY_SHOW_POPOUT } from '../const';
export const isString = (tmp) => typeof tmp === 'string';
export const isPageObject = (path) => {
    return typeof path === 'object' && 'path' in path;
};
export const isPageWithOptionsPath = (path) => {
    return typeof path === 'object' && !isPageObject(path);
};
export function getParamKeys(path) {
    return path?.match(/\/:[^\/]+/g)?.map((param) => param.replace('/', '')) ?? [];
}
export function fillParamsIntoPath(path, params) {
    const parameters = getParamKeys(path);
    const paramInjector = (acc, param) => {
        const paramName = param.replace(':', '');
        invariant(params?.[paramName], `Missing parameter ${paramName} while building route ${path}`);
        return acc.replace(param, params[paramName]);
    };
    return parameters.reduce(paramInjector, path);
}
export function getRouteContext(state, panelsHistory = []) {
    return {
        state,
        match: state.matches.length
            ? state.matches[state.matches.length - 1]
            : undefined,
        panelsHistory: panelsHistory,
    };
}
export function isModalShown(location) {
    return location.state && STATE_KEY_SHOW_MODAL in location.state;
}
export function isPopoutShown(location) {
    return location.state && STATE_KEY_SHOW_POPOUT in location.state;
}
export function createKey() {
    const allNumbersAndLetters = 36;
    const positionAfterZeroAnDot = 2;
    const keyLength = 7;
    return Math.random()
        .toString(allNumbersAndLetters)
        .substring(positionAfterZeroAnDot, positionAfterZeroAnDot + keyLength);
}
export function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
}
export function warning(cond, message) {
    if (!cond) {
        if (typeof console !== 'undefined')
            console.warn(message);
        try {
            throw new Error(message);
        }
        catch (e) { }
    }
}
export function invariant(value, message) {
    if (value === false || value === null || typeof value === 'undefined') {
        throw new Error(message);
    }
}
export function extractPathFromNavigationTarget(to, defaultPathname = '') {
    if (isString(to)) {
        return to;
    }
    const path = isPageObject(to) ? to.path : to.pathname || defaultPathname;
    if (isString(path)) {
        return path;
    }
    return path.path;
}
export function transformSearchParams(searchParams = '') {
    if (!isString(searchParams) && !(searchParams instanceof URLSearchParams)) {
        return `${new URLSearchParams(searchParams)}`;
    }
    return searchParams.toString();
}
export function getPathFromTo({ to, params, defaultPathname = '', }) {
    const path = extractPathFromNavigationTarget(to, defaultPathname);
    const search = isPageWithOptionsPath(to) ? transformSearchParams(to.search) : '';
    const hasParams = getParamKeys(path).length > 0;
    if (hasParams) {
        const filledPath = fillParamsIntoPath(path, params);
        return isPageWithOptionsPath(to)
            ? createPath({ ...to, pathname: filledPath, search })
            : filledPath;
    }
    return isPageWithOptionsPath(to) ? createPath({ ...to, pathname: path, search }) : path;
}
//# sourceMappingURL=utils.js.map